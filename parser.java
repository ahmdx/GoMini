
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\002\004\000\002\002\005\000\002\002" +
    "\006\000\002\004\004\000\002\005\003\000\002\006\004" +
    "\000\002\007\003\000\002\007\005\000\002\003\004\000" +
    "\002\003\005\000\002\003\002\000\002\011\004\000\002" +
    "\011\004\000\002\011\003\000\002\010\004\000\002\010" +
    "\005\000\002\010\002\000\002\012\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\004\000\002\013\003\000" +
    "\002\013\004\000\002\014\004\000\002\014\002\000\002" +
    "\015\004\000\002\015\004\000\002\016\004\000\002\017" +
    "\003\000\002\017\005\000\002\020\003\000\002\020\005" +
    "\000\002\020\006\000\002\021\005\000\002\021\002\000" +
    "\002\022\004\000\002\023\003\000\002\023\005\000\002" +
    "\024\004\000\002\024\006\000\002\024\005\000\002\026" +
    "\005\000\002\026\002\000\002\027\005\000\002\030\004" +
    "\000\002\031\005\000\002\031\002\000\002\041\005\000" +
    "\002\042\003\000\002\042\003\000\002\043\003\000\002" +
    "\044\004\000\002\045\003\000\002\056\006\000\002\060" +
    "\003\000\002\057\003\000\002\046\005\000\002\076\003" +
    "\000\002\076\004\000\002\076\004\000\002\076\004\000" +
    "\002\076\003\000\002\076\004\000\002\076\003\000\002" +
    "\076\004\000\002\076\003\000\002\076\004\000\002\076" +
    "\003\000\002\076\004\000\002\100\003\000\002\077\004" +
    "\000\002\077\002\000\002\101\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\003\000\002\102\003\000\002" +
    "\103\004\000\002\104\003\000\002\104\003\000\002\105" +
    "\005\000\002\106\003\000\002\106\004\000\002\106\004" +
    "\000\002\111\005\000\002\111\007\000\002\111\007\000" +
    "\002\111\011\000\002\112\003\000\002\112\003\000\002" +
    "\113\003\000\002\114\006\000\002\114\007\000\002\114" +
    "\010\000\002\114\011\000\002\115\005\000\002\116\004" +
    "\000\002\116\002\000\002\117\004\000\002\117\003\000" +
    "\002\120\005\000\002\121\003\000\002\122\007\000\002" +
    "\123\003\000\002\124\003\000\002\110\003\000\002\107" +
    "\003\000\002\107\004\000\002\036\003\000\002\036\003" +
    "\000\002\037\003\000\002\040\003\000\002\047\004\000" +
    "\002\050\003\000\002\050\004\000\002\053\003\000\002" +
    "\053\005\000\002\051\004\000\002\051\005\000\002\052" +
    "\004\000\002\054\004\000\002\054\005\000\002\055\005" +
    "\000\002\055\002\000\002\061\003\000\002\061\005\000" +
    "\002\061\005\000\002\061\005\000\002\061\005\000\002" +
    "\061\005\000\002\061\005\000\002\061\005\000\002\061" +
    "\005\000\002\061\005\000\002\061\005\000\002\061\005" +
    "\000\002\061\005\000\002\066\004\000\002\067\005\000" +
    "\002\067\002\000\002\062\003\000\002\062\004\000\002" +
    "\062\004\000\002\062\004\000\002\063\003\000\002\063" +
    "\004\000\002\063\004\000\002\070\003\000\002\070\003" +
    "\000\002\070\005\000\002\071\003\000\002\071\003\000" +
    "\002\074\003\000\002\074\003\000\002\075\004\000\002" +
    "\064\004\000\002\065\004\000\002\065\005\000\002\072" +
    "\003\000\002\072\003\000\002\073\006\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\004\005\006\001\002\000\004\002\u011e\001" +
    "\002\000\016\002\ufff7\006\012\013\ufff7\014\ufff7\021\ufff7" +
    "\043\011\001\002\000\004\007\010\001\002\000\016\002" +
    "\ufffe\006\ufffe\013\ufffe\014\ufffe\021\ufffe\043\ufffe\001\002" +
    "\000\022\002\ufffd\006\ufffd\010\ufffd\013\ufffd\014\ufffd\021" +
    "\ufffd\041\ufffd\043\ufffd\001\002\000\014\002\ufff7\006\012" +
    "\013\ufff7\014\ufff7\021\ufff7\001\002\000\012\007\010\010" +
    "\u0110\041\u0112\055\u0111\001\002\000\012\002\uffe9\013\031" +
    "\014\025\021\020\001\002\000\016\002\ufff7\006\012\013" +
    "\ufff7\014\ufff7\021\ufff7\043\015\001\002\000\014\002\ufff7" +
    "\006\012\013\ufff7\014\ufff7\021\ufff7\001\002\000\012\002" +
    "\ufff9\013\ufff9\014\ufff9\021\ufff9\001\002\000\012\002\ufff8" +
    "\013\ufff8\014\ufff8\021\ufff8\001\002\000\006\007\u0103\055" +
    "\153\001\002\000\012\002\uffef\013\uffef\014\uffef\021\uffef" +
    "\001\002\000\012\002\uffe9\013\031\014\025\021\020\001" +
    "\002\000\014\002\uffee\013\uffee\014\uffee\021\uffee\043\u0101" +
    "\001\002\000\004\043\u0100\001\002\000\006\007\362\055" +
    "\364\001\002\000\004\002\000\001\002\000\014\002\uffec" +
    "\013\uffec\014\uffec\021\uffec\043\361\001\002\000\004\043" +
    "\360\001\002\000\006\007\033\055\034\001\002\000\004" +
    "\043\uffe6\001\002\000\012\007\047\021\043\043\uffe3\052" +
    "\044\001\002\000\006\007\033\056\uffdf\001\002\000\004" +
    "\043\uffe5\001\002\000\004\043\041\001\002\000\004\056" +
    "\040\001\002\000\004\043\uffe4\001\002\000\006\007\033" +
    "\056\uffdf\001\002\000\004\056\uffe0\001\002\000\004\055" +
    "\153\001\002\000\024\007\055\010\053\011\071\021\062" +
    "\041\066\045\054\046\056\054\064\055\065\001\002\000" +
    "\012\042\uff94\043\uff94\052\uff94\056\uff94\001\002\000\004" +
    "\052\052\001\002\000\012\042\uff93\043\uff93\052\uff93\056" +
    "\uff93\001\002\000\012\042\uff95\043\uff95\052\uff95\056\uff95" +
    "\001\002\000\012\042\uff92\043\uff92\052\uff92\056\uff92\001" +
    "\002\000\024\007\055\010\053\011\071\021\062\041\066" +
    "\045\054\046\056\054\064\055\065\001\002\000\060\027" +
    "\uff68\031\uff68\032\uff68\033\uff68\034\uff68\035\uff68\037\uff68" +
    "\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046" +
    "\uff68\047\uff68\050\uff68\051\uff68\052\uff68\053\uff68\054\uff68" +
    "\055\uff68\056\uff68\057\uff68\001\002\000\024\007\055\010" +
    "\053\011\071\021\062\041\066\045\054\046\056\054\064" +
    "\055\065\001\002\000\060\027\uff63\031\uff63\032\uff63\033" +
    "\uff63\034\uff63\035\uff63\037\uff63\040\uff63\041\uff63\042\uff63" +
    "\043\uff63\044\uff63\045\uff63\046\uff63\047\uff63\050\uff63\051" +
    "\uff63\052\uff63\053\uff63\054\uff63\055\uff63\056\uff63\057\uff63" +
    "\001\002\000\024\007\055\010\053\011\071\021\062\041" +
    "\066\045\054\046\056\054\064\055\065\001\002\000\054" +
    "\027\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\037" +
    "\uff85\040\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85" +
    "\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85\056" +
    "\uff85\057\uff85\001\002\000\034\033\103\034\115\035\107" +
    "\037\114\040\104\043\uffe1\044\105\045\112\046\113\047" +
    "\111\051\102\053\110\054\101\001\002\000\060\027\uff62" +
    "\031\uff62\032\uff62\033\uff62\034\uff62\035\uff62\037\uff62\040" +
    "\uff62\041\uff62\042\uff62\043\uff62\044\uff62\045\uff62\046\uff62" +
    "\047\uff62\050\uff62\051\uff62\052\uff62\053\uff62\054\uff62\055" +
    "\uff62\056\uff62\057\uff62\001\002\000\004\055\153\001\002" +
    "\000\060\027\uff75\031\uff75\032\uff75\033\uff75\034\uff75\035" +
    "\uff75\037\uff75\040\uff75\041\136\042\uff75\043\uff75\044\uff75" +
    "\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053" +
    "\uff75\054\uff75\055\135\056\uff75\057\uff75\001\002\000\024" +
    "\007\055\010\053\011\071\021\062\041\066\045\054\046" +
    "\056\054\064\055\065\001\002\000\024\007\055\010\053" +
    "\011\071\021\062\041\066\045\054\046\056\054\064\055" +
    "\065\001\002\000\004\007\010\001\002\000\060\027\uff6b" +
    "\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\037\uff6b\040" +
    "\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b" +
    "\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\054\uff6b\055" +
    "\uff6b\056\uff6b\057\uff6b\001\002\000\060\027\uff6e\031\uff6e" +
    "\032\uff6e\033\uff6e\034\uff6e\035\uff6e\037\uff6e\040\uff6e\041" +
    "\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e" +
    "\050\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e\056" +
    "\uff6e\057\uff6e\001\002\000\060\027\uff69\031\uff69\032\uff69" +
    "\033\uff69\034\uff69\035\uff69\037\uff69\040\uff69\041\uff69\042" +
    "\uff69\043\uff69\044\uff69\045\uff69\046\uff69\047\uff69\050\uff69" +
    "\051\uff69\052\uff69\053\uff69\054\uff69\055\uff69\056\uff69\057" +
    "\uff69\001\002\000\060\027\uff6d\031\uff6d\032\uff6d\033\uff6d" +
    "\034\uff6d\035\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043" +
    "\uff6d\044\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d" +
    "\052\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d\001" +
    "\002\000\060\027\uff71\031\uff71\032\uff71\033\uff71\034\uff71" +
    "\035\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044" +
    "\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71" +
    "\053\uff71\054\uff71\055\uff71\056\uff71\057\uff71\001\002\000" +
    "\060\027\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a\035\uff6a" +
    "\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a\045" +
    "\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a\052\uff6a\053\uff6a" +
    "\054\uff6a\055\uff6a\056\uff6a\057\uff6a\001\002\000\004\041" +
    "\076\001\002\000\004\007\077\001\002\000\060\027\uff61" +
    "\031\uff61\032\uff61\033\uff61\034\uff61\035\uff61\037\uff61\040" +
    "\uff61\041\uff61\042\uff61\043\uff61\044\uff61\045\uff61\046\uff61" +
    "\047\uff61\050\uff61\051\uff61\052\uff61\053\uff61\054\uff61\055" +
    "\uff61\056\uff61\057\uff61\001\002\000\034\033\103\034\115" +
    "\035\107\037\114\040\104\044\105\045\112\046\113\047" +
    "\111\051\102\053\110\054\101\056\106\001\002\000\024" +
    "\007\055\010\053\011\071\021\062\041\066\045\054\046" +
    "\056\054\064\055\065\001\002\000\024\007\055\010\053" +
    "\011\071\021\062\041\066\045\054\046\056\054\064\055" +
    "\065\001\002\000\024\007\055\010\053\011\071\021\062" +
    "\041\066\045\054\046\056\054\064\055\065\001\002\000" +
    "\024\007\055\010\053\011\071\021\062\041\066\045\054" +
    "\046\056\054\064\055\065\001\002\000\024\007\055\010" +
    "\053\011\071\021\062\041\066\045\054\046\056\054\064" +
    "\055\065\001\002\000\060\027\uff6c\031\uff6c\032\uff6c\033" +
    "\uff6c\034\uff6c\035\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c" +
    "\043\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051" +
    "\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c" +
    "\001\002\000\024\007\055\010\053\011\071\021\062\041" +
    "\066\045\054\046\056\054\064\055\065\001\002\000\024" +
    "\007\055\010\053\011\071\021\062\041\066\045\054\046" +
    "\056\054\064\055\065\001\002\000\024\007\055\010\053" +
    "\011\071\021\062\041\066\045\054\046\056\054\064\055" +
    "\065\001\002\000\024\007\055\010\053\011\071\021\062" +
    "\041\066\045\054\046\056\054\064\055\065\001\002\000" +
    "\024\007\055\010\053\011\071\021\062\041\066\045\054" +
    "\046\056\054\064\055\065\001\002\000\024\007\055\010" +
    "\053\011\071\021\062\041\066\045\054\046\056\054\064" +
    "\055\065\001\002\000\024\007\055\010\053\011\071\021" +
    "\062\041\066\045\054\046\056\054\064\055\065\001\002" +
    "\000\054\027\uff82\031\uff82\032\uff82\033\103\034\uff82\035" +
    "\uff82\037\114\040\104\042\uff82\043\uff82\044\105\045\112" +
    "\046\113\047\111\050\uff82\051\102\052\uff82\053\110\054" +
    "\101\056\uff82\057\uff82\001\002\000\054\027\uff7c\031\uff7c" +
    "\032\uff7c\033\uff7c\034\uff7c\035\uff7c\037\uff7c\040\uff7c\042" +
    "\uff7c\043\uff7c\044\105\045\112\046\113\047\uff7c\050\uff7c" +
    "\051\102\052\uff7c\053\110\054\101\056\uff7c\057\uff7c\001" +
    "\002\000\054\027\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f" +
    "\035\uff7f\037\uff7f\040\uff7f\042\uff7f\043\uff7f\044\uff7f\045" +
    "\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f" +
    "\054\uff7f\056\uff7f\057\uff7f\001\002\000\054\027\uff79\031" +
    "\uff79\032\uff79\033\uff79\034\uff79\035\uff79\037\uff79\040\uff79" +
    "\042\uff79\043\uff79\044\105\045\112\046\113\047\uff79\050" +
    "\uff79\051\102\052\uff79\053\uff79\054\uff79\056\uff79\057\uff79" +
    "\001\002\000\054\027\uff7a\031\uff7a\032\uff7a\033\103\034" +
    "\uff7a\035\uff7a\037\114\040\104\042\uff7a\043\uff7a\044\105" +
    "\045\112\046\113\047\uff7a\050\uff7a\051\102\052\uff7a\053" +
    "\110\054\101\056\uff7a\057\uff7a\001\002\000\054\027\uff81" +
    "\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\037\uff81\040" +
    "\uff81\042\uff81\043\uff81\044\105\045\112\046\113\047\uff81" +
    "\050\uff81\051\102\052\uff81\053\uff81\054\uff81\056\uff81\057" +
    "\uff81\001\002\000\054\027\uff83\031\uff83\032\uff83\033\103" +
    "\034\115\035\uff83\037\114\040\104\042\uff83\043\uff83\044" +
    "\105\045\112\046\113\047\111\050\uff83\051\102\052\uff83" +
    "\053\110\054\101\056\uff83\057\uff83\001\002\000\054\027" +
    "\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\037\uff7d" +
    "\040\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047" +
    "\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\056\uff7d" +
    "\057\uff7d\001\002\000\054\027\uff7b\031\uff7b\032\uff7b\033" +
    "\uff7b\034\uff7b\035\uff7b\037\uff7b\040\uff7b\042\uff7b\043\uff7b" +
    "\044\105\045\112\046\113\047\uff7b\050\uff7b\051\102\052" +
    "\uff7b\053\110\054\101\056\uff7b\057\uff7b\001\002\000\054" +
    "\027\uff84\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\037" +
    "\114\040\104\042\uff84\043\uff84\044\105\045\112\046\113" +
    "\047\uff84\050\uff84\051\102\052\uff84\053\110\054\101\056" +
    "\uff84\057\uff84\001\002\000\054\027\uff7e\031\uff7e\032\uff7e" +
    "\033\uff7e\034\uff7e\035\uff7e\037\uff7e\040\uff7e\042\uff7e\043" +
    "\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e" +
    "\052\uff7e\053\uff7e\054\uff7e\056\uff7e\057\uff7e\001\002\000" +
    "\054\027\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80" +
    "\037\uff80\040\uff80\042\uff80\043\uff80\044\105\045\112\046" +
    "\113\047\uff80\050\uff80\051\102\052\uff80\053\uff80\054\uff80" +
    "\056\uff80\057\uff80\001\002\000\054\027\uff74\031\uff74\032" +
    "\uff74\033\uff74\034\uff74\035\uff74\037\uff74\040\uff74\042\uff74" +
    "\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74\050\uff74\051" +
    "\uff74\052\uff74\053\uff74\054\uff74\056\uff74\057\uff74\001\002" +
    "\000\060\027\uff70\031\uff70\032\uff70\033\uff70\034\uff70\035" +
    "\uff70\037\uff70\040\uff70\041\uff70\042\uff70\043\uff70\044\uff70" +
    "\045\uff70\046\uff70\047\uff70\050\uff70\051\uff70\052\uff70\053" +
    "\uff70\054\uff70\055\uff70\056\uff70\057\uff70\001\002\000\060" +
    "\027\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\037" +
    "\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f" +
    "\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054" +
    "\uff6f\055\uff6f\056\uff6f\057\uff6f\001\002\000\026\007\055" +
    "\010\053\011\071\021\062\041\066\045\054\046\056\054" +
    "\064\055\065\056\140\001\002\000\004\007\137\001\002" +
    "\000\060\027\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035" +
    "\uff66\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66\044\uff66" +
    "\045\uff66\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053" +
    "\uff66\054\uff66\055\uff66\056\uff66\057\uff66\001\002\000\060" +
    "\027\uff65\031\uff65\032\uff65\033\uff65\034\uff65\035\uff65\037" +
    "\uff65\040\uff65\041\uff65\042\uff65\043\uff65\044\uff65\045\uff65" +
    "\046\uff65\047\uff65\050\uff65\051\uff65\052\uff65\053\uff65\054" +
    "\uff65\055\uff65\056\uff65\057\uff65\001\002\000\042\033\103" +
    "\034\115\035\107\037\114\040\104\042\145\043\uff76\044" +
    "\105\045\112\046\113\047\111\051\102\053\110\054\101" +
    "\056\uff76\057\uff76\001\002\000\004\056\143\001\002\000" +
    "\060\027\uff64\031\uff64\032\uff64\033\uff64\034\uff64\035\uff64" +
    "\037\uff64\040\uff64\041\uff64\042\uff64\043\uff64\044\uff64\045" +
    "\uff64\046\uff64\047\uff64\050\uff64\051\uff64\052\uff64\053\uff64" +
    "\054\uff64\055\uff64\056\uff64\057\uff64\001\002\000\034\037" +
    "\uff78\040\uff78\043\uff78\044\uff78\046\uff78\047\uff78\050\uff78" +
    "\051\uff78\052\uff78\053\uff78\054\uff78\056\uff78\057\uff78\001" +
    "\002\000\024\007\055\010\053\011\071\021\062\041\066" +
    "\045\054\046\056\054\064\055\065\001\002\000\046\033" +
    "\103\034\115\035\107\037\114\040\104\042\145\043\uff76" +
    "\044\105\045\112\046\113\047\111\050\uff76\051\102\052" +
    "\uff76\053\110\054\101\056\uff76\057\uff76\001\002\000\034" +
    "\037\uff77\040\uff77\043\uff77\044\uff77\046\uff77\047\uff77\050" +
    "\uff77\051\uff77\052\uff77\053\uff77\054\uff77\056\uff77\057\uff77" +
    "\001\002\000\060\027\uff67\031\uff67\032\uff67\033\uff67\034" +
    "\uff67\035\uff67\037\uff67\040\uff67\041\uff67\042\uff67\043\uff67" +
    "\044\uff67\045\uff67\046\uff67\047\uff67\050\uff67\051\uff67\052" +
    "\uff67\053\uff67\054\uff67\055\uff67\056\uff67\057\uff67\001\002" +
    "\000\004\057\203\001\002\000\026\002\uff90\013\uff90\014" +
    "\uff90\021\uff90\042\uff90\043\uff90\052\uff90\055\177\056\uff90" +
    "\057\uff90\001\002\000\006\007\157\056\155\001\002\000" +
    "\006\042\171\056\uff86\001\002\000\030\002\uff8c\007\uff8c" +
    "\013\uff8c\014\uff8c\021\uff8c\042\uff8c\043\uff8c\052\uff8c\055" +
    "\uff8c\056\uff8c\057\uff8c\001\002\000\010\007\047\021\043" +
    "\063\167\001\002\000\012\007\uffd3\021\uffd3\042\162\063" +
    "\uffd3\001\002\000\004\056\161\001\002\000\030\002\uff8b" +
    "\007\uff8b\013\uff8b\014\uff8b\021\uff8b\042\uff8b\043\uff8b\052" +
    "\uff8b\055\uff8b\056\uff8b\057\uff8b\001\002\000\004\007\164" +
    "\001\002\000\012\007\uffd5\021\uffd5\030\uffd5\063\uffd5\001" +
    "\002\000\014\007\uffd3\021\uffd3\030\uffd3\042\162\063\uffd3" +
    "\001\002\000\012\007\uffd4\021\uffd4\030\uffd4\063\uffd4\001" +
    "\002\000\006\042\uff89\056\uff89\001\002\000\006\007\047" +
    "\021\043\001\002\000\006\042\uff88\056\uff88\001\002\000" +
    "\004\007\157\001\002\000\004\056\uff8a\001\002\000\006" +
    "\042\171\056\uff86\001\002\000\004\056\uff87\001\002\000" +
    "\024\002\uff8f\013\uff8f\014\uff8f\021\uff8f\042\uff8f\043\uff8f" +
    "\052\uff8f\056\uff8f\057\uff8f\001\002\000\024\002\uff8e\013" +
    "\uff8e\014\uff8e\021\uff8e\042\uff8e\043\uff8e\052\uff8e\056\uff8e" +
    "\057\uff8e\001\002\000\010\007\201\021\043\056\155\001" +
    "\002\000\004\056\202\001\002\000\014\007\uffd3\021\uffd3" +
    "\042\162\056\uff93\063\uffd3\001\002\000\024\002\uff8d\013" +
    "\uff8d\014\uff8d\021\uff8d\042\uff8d\043\uff8d\052\uff8d\056\uff8d" +
    "\057\uff8d\001\002\000\046\007\236\010\053\011\071\012" +
    "\212\013\031\014\025\015\216\017\226\021\062\024\223" +
    "\025\222\041\066\045\054\046\056\054\064\055\065\057" +
    "\203\060\uffba\001\002\000\070\002\uffce\013\uffce\014\uffce" +
    "\021\uffce\027\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053" +
    "\uffce\054\uffce\055\uffce\056\uffce\057\uffce\001\002\000\070" +
    "\002\uffcd\013\uffcd\014\uffcd\021\uffcd\027\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\001\002\000\054\007\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\024\uffbe\025\uffbe\041\uffbe\043\353\045\uffbe\046" +
    "\uffbe\054\uffbe\055\uffbe\057\uffbe\060\uffbe\001\002\000\006" +
    "\043\uffb6\057\uffb6\001\002\000\054\007\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\024\uffc4\025\uffc4\041\uffc4\043\352\045" +
    "\uffc4\046\uffc4\054\uffc4\055\uffc4\057\uffc4\060\uffc4\001\002" +
    "\000\010\020\uffbc\022\uffbc\060\uffbc\001\002\000\024\007" +
    "\236\010\053\011\071\021\062\041\066\045\054\046\056" +
    "\054\064\055\065\001\002\000\004\043\337\001\002\000" +
    "\004\043\336\001\002\000\006\043\uffb7\057\uffb7\001\002" +
    "\000\024\007\236\010\053\011\071\021\062\041\066\045" +
    "\054\046\056\054\064\055\065\001\002\000\006\043\uffb9" +
    "\057\uffb9\001\002\000\050\031\270\032\267\033\103\034" +
    "\115\035\107\037\114\040\104\042\145\043\uffb5\044\105" +
    "\045\112\046\113\047\111\050\uff76\051\102\052\uff76\053" +
    "\110\054\101\057\uffb5\001\002\000\052\007\236\010\053" +
    "\011\071\012\212\013\031\014\025\015\216\017\226\020" +
    "\uffba\021\062\022\uffba\024\223\025\222\041\066\045\054" +
    "\046\056\054\064\055\065\057\203\060\uffba\001\002\000" +
    "\026\007\055\010\053\011\071\021\062\041\066\043\uff97" +
    "\045\054\046\056\054\064\055\065\001\002\000\004\043" +
    "\uff98\001\002\000\004\043\317\001\002\000\054\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0\025\uffc0\041\uffc0" +
    "\043\316\045\uffc0\046\uffc0\054\uffc0\055\uffc0\057\uffc0\060" +
    "\uffc0\001\002\000\026\007\236\010\053\011\071\021\062" +
    "\041\066\045\054\046\056\054\064\055\065\057\263\001" +
    "\002\000\006\043\uffb8\057\uffb8\001\002\000\004\030\261" +
    "\001\002\000\054\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013" +
    "\uffa7\014\uffa7\015\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\024\uffa7\025\uffa7\041\uffa7\043\uffa7\045\uffa7\046\uffa7\054" +
    "\uffa7\055\uffa7\057\uffa7\060\uffa7\001\002\000\054\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2\025\uffc2\041\uffc2" +
    "\043\260\045\uffc2\046\uffc2\054\uffc2\055\uffc2\057\uffc2\060" +
    "\uffc2\001\002\000\026\037\254\040\244\044\245\046\253" +
    "\047\252\050\242\051\241\052\250\053\251\054\240\001" +
    "\002\000\052\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\024" +
    "\uffc8\025\uffc8\041\uffc8\045\uffc8\046\uffc8\054\uffc8\055\uffc8" +
    "\057\uffc8\060\uffc8\001\002\000\004\060\237\001\002\000" +
    "\056\030\uffd3\031\uff63\032\uff63\033\uff63\034\uff63\035\uff63" +
    "\037\uff63\040\uff63\041\uff63\042\162\043\uff63\044\uff63\045" +
    "\uff63\046\uff63\047\uff63\050\uff63\051\uff63\052\uff63\053\uff63" +
    "\054\uff63\055\uff63\057\uff63\001\002\000\120\002\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9\025" +
    "\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\001\002\000" +
    "\004\052\uff5f\001\002\000\004\052\uff5c\001\002\000\004" +
    "\052\uff5e\001\002\000\004\052\257\001\002\000\004\052" +
    "\uff59\001\002\000\004\052\uff5b\001\002\000\004\052\256" +
    "\001\002\000\024\007\055\010\053\011\071\021\062\041" +
    "\066\045\054\046\056\054\064\055\065\001\002\000\024" +
    "\007\uffb0\010\uffb0\011\uffb0\021\uffb0\041\uffb0\045\uffb0\046" +
    "\uffb0\054\uffb0\055\uffb0\001\002\000\004\052\uff60\001\002" +
    "\000\004\052\uff58\001\002\000\004\052\uff5d\001\002\000" +
    "\004\052\uff5a\001\002\000\006\043\uffb1\057\uffb1\001\002" +
    "\000\024\007\uffae\010\uffae\011\uffae\021\uffae\041\uffae\045" +
    "\uffae\046\uffae\054\uffae\055\uffae\001\002\000\024\007\uffaf" +
    "\010\uffaf\011\uffaf\021\uffaf\041\uffaf\045\uffaf\046\uffaf\054" +
    "\uffaf\055\uffaf\001\002\000\052\007\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\014\uffc1\015\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\024\uffc1\025\uffc1\041\uffc1\045\uffc1\046\uffc1" +
    "\054\uffc1\055\uffc1\057\uffc1\060\uffc1\001\002\000\024\007" +
    "\055\010\053\011\071\021\062\041\066\045\054\046\056" +
    "\054\064\055\065\001\002\000\036\033\103\034\115\035" +
    "\107\037\114\040\104\043\uffd6\044\105\045\112\046\113" +
    "\047\111\051\102\053\110\054\101\057\uffd6\001\002\000" +
    "\010\020\275\022\272\060\uffa0\001\002\000\004\043\304" +
    "\001\002\000\050\031\270\032\267\033\103\034\115\035" +
    "\107\037\114\040\104\042\145\043\uffb5\044\105\045\112" +
    "\046\113\047\111\050\uff76\051\102\052\uff76\053\110\054" +
    "\101\057\266\001\002\000\010\020\275\022\272\060\uffa0" +
    "\001\002\000\006\043\uffb2\057\uffb2\001\002\000\006\043" +
    "\uffb3\057\uffb3\001\002\000\006\043\uffb4\057\uffb4\001\002" +
    "\000\004\027\uff9e\001\002\000\004\027\302\001\002\000" +
    "\010\020\275\022\272\060\uffa0\001\002\000\024\007\055" +
    "\010\053\011\071\021\062\041\066\045\054\046\056\054" +
    "\064\055\065\001\002\000\004\060\277\001\002\000\054" +
    "\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\024\uffa5\025\uffa5" +
    "\041\uffa5\043\uffa5\045\uffa5\046\uffa5\054\uffa5\055\uffa5\057" +
    "\uffa5\060\uffa5\001\002\000\034\027\uff9f\033\103\034\115" +
    "\035\107\037\114\040\104\044\105\045\112\046\113\047" +
    "\111\051\102\053\110\054\101\001\002\000\004\060\uffa1" +
    "\001\002\000\052\007\236\010\053\011\071\012\212\013" +
    "\031\014\025\015\216\017\226\020\uffba\021\062\022\uffba" +
    "\024\223\025\222\041\066\045\054\046\056\054\064\055" +
    "\065\057\203\060\uffba\001\002\000\010\020\uffa2\022\uffa2" +
    "\060\uffa2\001\002\000\026\007\055\010\053\011\071\021" +
    "\062\041\066\045\054\046\056\054\064\055\065\057\305" +
    "\001\002\000\010\020\275\022\272\060\uffa0\001\002\000" +
    "\034\033\103\034\115\035\107\037\114\040\104\044\105" +
    "\045\112\046\113\047\111\051\102\053\110\054\101\057" +
    "\307\001\002\000\010\020\275\022\272\060\uffa0\001\002" +
    "\000\004\060\311\001\002\000\054\007\uffa3\010\uffa3\011" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\024\uffa3\025\uffa3\041\uffa3\043\uffa3\045" +
    "\uffa3\046\uffa3\054\uffa3\055\uffa3\057\uffa3\060\uffa3\001\002" +
    "\000\004\060\313\001\002\000\054\007\uffa4\010\uffa4\011" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\024\uffa4\025\uffa4\041\uffa4\043\uffa4\045" +
    "\uffa4\046\uffa4\054\uffa4\055\uffa4\057\uffa4\060\uffa4\001\002" +
    "\000\004\060\315\001\002\000\054\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\024\uffa6\025\uffa6\041\uffa6\043\uffa6\045" +
    "\uffa6\046\uffa6\054\uffa6\055\uffa6\057\uffa6\060\uffa6\001\002" +
    "\000\052\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\024\uffbf" +
    "\025\uffbf\041\uffbf\045\uffbf\046\uffbf\054\uffbf\055\uffbf\057" +
    "\uffbf\060\uffbf\001\002\000\052\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\024\uffc7\025\uffc7\041\uffc7\045\uffc7\046\uffc7" +
    "\054\uffc7\055\uffc7\057\uffc7\060\uffc7\001\002\000\004\043" +
    "\uff96\001\002\000\010\020\uffbb\022\uffbb\060\uffbb\001\002" +
    "\000\004\043\331\001\002\000\050\031\270\032\267\033" +
    "\103\034\115\035\107\037\114\040\104\042\145\043\uffb5" +
    "\044\105\045\112\046\113\047\111\050\uff76\051\102\052" +
    "\uff76\053\110\054\101\057\203\001\002\000\056\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016" +
    "\325\017\uffad\020\uffad\021\uffad\022\uffad\024\uffad\025\uffad" +
    "\041\uffad\043\uffad\045\uffad\046\uffad\054\uffad\055\uffad\057" +
    "\uffad\060\uffad\001\002\000\006\015\216\057\203\001\002" +
    "\000\054\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\024\uffa9" +
    "\025\uffa9\041\uffa9\043\uffa9\045\uffa9\046\uffa9\054\uffa9\055" +
    "\uffa9\057\uffa9\060\uffa9\001\002\000\054\007\uffac\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\017\uffac\020" +
    "\uffac\021\uffac\022\uffac\024\uffac\025\uffac\041\uffac\043\uffac" +
    "\045\uffac\046\uffac\054\uffac\055\uffac\057\uffac\060\uffac\001" +
    "\002\000\054\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\024" +
    "\uffa8\025\uffa8\041\uffa8\043\uffa8\045\uffa8\046\uffa8\054\uffa8" +
    "\055\uffa8\057\uffa8\060\uffa8\001\002\000\024\007\055\010" +
    "\053\011\071\021\062\041\066\045\054\046\056\054\064" +
    "\055\065\001\002\000\034\033\103\034\115\035\107\037" +
    "\114\040\104\044\105\045\112\046\113\047\111\051\102" +
    "\053\110\054\101\057\203\001\002\000\056\007\uffab\010" +
    "\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\334" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\024\uffab\025\uffab\041" +
    "\uffab\043\uffab\045\uffab\046\uffab\054\uffab\055\uffab\057\uffab" +
    "\060\uffab\001\002\000\006\015\216\057\203\001\002\000" +
    "\054\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\024\uffaa\025" +
    "\uffaa\041\uffaa\043\uffaa\045\uffaa\046\uffaa\054\uffaa\055\uffaa" +
    "\057\uffaa\060\uffaa\001\002\000\052\007\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\024\uffc6\025\uffc6\041\uffc6\045\uffc6\046" +
    "\uffc6\054\uffc6\055\uffc6\057\uffc6\060\uffc6\001\002\000\052" +
    "\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5\025\uffc5" +
    "\041\uffc5\045\uffc5\046\uffc5\054\uffc5\055\uffc5\057\uffc5\060" +
    "\uffc5\001\002\000\004\043\uff9a\001\002\000\004\057\203" +
    "\001\002\000\004\043\343\001\002\000\024\007\055\010" +
    "\053\011\071\021\062\041\066\045\054\046\056\054\064" +
    "\055\065\001\002\000\034\033\103\034\115\035\107\037" +
    "\114\040\104\043\uff9c\044\105\045\112\046\113\047\111" +
    "\051\102\053\110\054\101\001\002\000\004\043\346\001" +
    "\002\000\024\007\236\010\053\011\071\021\062\041\066" +
    "\045\054\046\056\054\064\055\065\001\002\000\004\057" +
    "\uff99\001\002\000\004\057\uff9b\001\002\000\054\007\uff9d" +
    "\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\024\uff9d\025\uff9d\041\uff9d" +
    "\043\uff9d\045\uff9d\046\uff9d\054\uff9d\055\uff9d\057\uff9d\060" +
    "\uff9d\001\002\000\052\007\uffc3\010\uffc3\011\uffc3\012\uffc3" +
    "\013\uffc3\014\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\024\uffc3\025\uffc3\041\uffc3\045\uffc3\046\uffc3\054\uffc3" +
    "\055\uffc3\057\uffc3\060\uffc3\001\002\000\052\007\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\024\uffbd\025\uffbd\041\uffbd\045" +
    "\uffbd\046\uffbd\054\uffbd\055\uffbd\057\uffbd\060\uffbd\001\002" +
    "\000\054\027\uff72\031\uff72\032\uff72\033\uff72\034\uff72\035" +
    "\uff72\037\uff72\040\uff72\042\uff72\043\uff72\044\uff72\045\uff72" +
    "\046\uff72\047\uff72\050\uff72\051\uff72\052\uff72\053\uff72\054" +
    "\uff72\056\uff72\057\uff72\001\002\000\054\027\uff73\031\uff73" +
    "\032\uff73\033\uff73\034\uff73\035\uff73\037\uff73\040\uff73\042" +
    "\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050\uff73" +
    "\051\uff73\052\uff73\053\uff73\054\uff73\056\uff73\057\uff73\001" +
    "\002\000\034\033\103\034\115\035\107\037\114\040\104" +
    "\043\uffe2\044\105\045\112\046\113\047\111\051\102\053" +
    "\110\054\101\001\002\000\012\042\uff91\043\uff91\052\uff91" +
    "\056\uff91\001\002\000\054\002\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\024\uffe7\025\uffe7\041\uffe7\045\uffe7\046" +
    "\uffe7\054\uffe7\055\uffe7\057\uffe7\060\uffe7\001\002\000\012" +
    "\002\uffeb\013\uffeb\014\uffeb\021\uffeb\001\002\000\010\007" +
    "\047\021\043\052\373\001\002\000\004\043\uffdd\001\002" +
    "\000\006\007\362\056\uffd7\001\002\000\004\043\uffde\001" +
    "\002\000\004\043\371\001\002\000\004\056\370\001\002" +
    "\000\004\043\uffdc\001\002\000\006\007\362\056\uffd7\001" +
    "\002\000\004\056\uffd8\001\002\000\024\007\055\010\053" +
    "\011\071\021\062\041\066\045\054\046\056\054\064\055" +
    "\065\001\002\000\006\043\uffdb\052\375\001\002\000\024" +
    "\007\055\010\053\011\071\021\062\041\066\045\054\046" +
    "\056\054\064\055\065\001\002\000\034\033\103\034\115" +
    "\035\107\037\114\040\104\043\uffda\044\105\045\112\046" +
    "\113\047\111\051\102\053\110\054\101\001\002\000\034" +
    "\033\103\034\115\035\107\037\114\040\104\043\uffd9\044" +
    "\105\045\112\046\113\047\111\051\102\053\110\054\101" +
    "\001\002\000\054\002\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\024\uffe8\025\uffe8\041\uffe8\045\uffe8\046\uffe8\054" +
    "\uffe8\055\uffe8\057\uffe8\060\uffe8\001\002\000\012\002\uffed" +
    "\013\uffed\014\uffed\021\uffed\001\002\000\004\002\uffea\001" +
    "\002\000\004\055\uffcf\001\002\000\004\007\uffcb\001\002" +
    "\000\004\007\u010b\001\002\000\004\055\153\001\002\000" +
    "\014\002\uffd1\013\uffd1\014\uffd1\021\uffd1\043\uffd1\001\002" +
    "\000\016\002\uffd0\013\uffd0\014\uffd0\021\uffd0\043\uffd0\057" +
    "\203\001\002\000\014\002\uffd2\013\uffd2\014\uffd2\021\uffd2" +
    "\043\uffd2\001\002\000\004\055\153\001\002\000\004\055" +
    "\uffca\001\002\000\014\002\uffcc\013\uffcc\014\uffcc\021\uffcc" +
    "\043\uffcc\001\002\000\016\002\ufffb\006\ufffb\013\ufffb\014" +
    "\ufffb\021\ufffb\043\ufffb\001\002\000\004\010\u0110\001\002" +
    "\000\026\002\ufff4\006\ufff4\007\ufff4\010\ufff4\013\ufff4\014" +
    "\ufff4\021\ufff4\041\ufff4\043\ufff4\056\ufff4\001\002\000\026" +
    "\002\ufff0\006\ufff0\007\ufff0\010\ufff0\013\ufff0\014\ufff0\021" +
    "\ufff0\041\ufff0\043\ufff0\056\ufff0\001\002\000\012\007\010" +
    "\010\u0110\041\u0112\056\ufff1\001\002\000\004\010\u0110\001" +
    "\002\000\016\002\ufffc\006\ufffc\013\ufffc\014\ufffc\021\ufffc" +
    "\043\ufffc\001\002\000\026\002\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\013\ufff6\014\ufff6\021\ufff6\041\ufff6\043\ufff6\056\ufff6" +
    "\001\002\000\014\007\010\010\u0110\041\u0112\043\u0118\056" +
    "\ufff1\001\002\000\004\056\u0117\001\002\000\016\002\ufffa" +
    "\006\ufffa\013\ufffa\014\ufffa\021\ufffa\043\ufffa\001\002\000" +
    "\012\007\010\010\u0110\041\u0112\056\ufff1\001\002\000\004" +
    "\056\ufff3\001\002\000\004\056\ufff2\001\002\000\026\002" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\013\ufff5\014\ufff5\021\ufff5" +
    "\041\ufff5\043\ufff5\056\ufff5\001\002\000\012\002\uffe9\013" +
    "\031\014\025\021\020\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\006\003\012\006\013\001\001\000\004\005\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\u011b\006\013\001\001\000\012\005\u010d\007\u0112\011\u010c" +
    "\012\u010e\001\001\000\020\013\021\014\025\015\020\016" +
    "\023\022\027\041\022\056\026\001\001\000\006\003\015" +
    "\006\013\001\001\000\006\003\016\006\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\043\u0105\051\u0103" +
    "\060\u0104\001\001\000\002\001\001\000\020\013\021\014" +
    "\u0101\015\020\016\023\022\027\041\022\056\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\364\024" +
    "\362\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\031\020\034\001\001\000\002\001" +
    "\001\000\012\036\045\037\047\040\044\047\050\001\001" +
    "\000\006\020\035\021\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\035\021\041\001\001\000\002\001\001\000\006\050" +
    "\356\051\151\001\001\000\024\061\355\062\056\063\062" +
    "\070\072\071\067\072\071\073\060\074\066\075\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\061\057\062" +
    "\056\063\062\070\072\071\067\072\071\073\060\074\066" +
    "\075\073\001\001\000\002\001\001\000\022\062\354\063" +
    "\062\070\072\071\067\072\071\073\060\074\066\075\073" +
    "\001\001\000\002\001\001\000\022\062\353\063\062\070" +
    "\072\071\067\072\071\073\060\074\066\075\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\044\147\050\150\051\151\001\001\000\006\064\132" +
    "\065\133\001\001\000\022\062\131\063\062\070\072\071" +
    "\067\072\071\073\060\074\066\075\073\001\001\000\024" +
    "\061\077\062\056\063\062\070\072\071\067\072\071\073" +
    "\060\074\066\075\073\001\001\000\004\005\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\061\130\062\056\063\062\070\072\071\067" +
    "\072\071\073\060\074\066\075\073\001\001\000\024\061" +
    "\127\062\056\063\062\070\072\071\067\072\071\073\060" +
    "\074\066\075\073\001\001\000\024\061\126\062\056\063" +
    "\062\070\072\071\067\072\071\073\060\074\066\075\073" +
    "\001\001\000\024\061\125\062\056\063\062\070\072\071" +
    "\067\072\071\073\060\074\066\075\073\001\001\000\024" +
    "\061\124\062\056\063\062\070\072\071\067\072\071\073" +
    "\060\074\066\075\073\001\001\000\002\001\001\000\024" +
    "\061\123\062\056\063\062\070\072\071\067\072\071\073" +
    "\060\074\066\075\073\001\001\000\024\061\122\062\056" +
    "\063\062\070\072\071\067\072\071\073\060\074\066\075" +
    "\073\001\001\000\024\061\121\062\056\063\062\070\072" +
    "\071\067\072\071\073\060\074\066\075\073\001\001\000" +
    "\024\061\120\062\056\063\062\070\072\071\067\072\071" +
    "\073\060\074\066\075\073\001\001\000\024\061\117\062" +
    "\056\063\062\070\072\071\067\072\071\073\060\074\066" +
    "\075\073\001\001\000\024\061\116\062\056\063\062\070" +
    "\072\071\067\072\071\073\060\074\066\075\073\001\001" +
    "\000\024\061\115\062\056\063\062\070\072\071\067\072" +
    "\071\073\060\074\066\075\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\061\140\062\056\063\062\066" +
    "\141\070\072\071\067\072\071\073\060\074\066\075\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\061\145\062\056\063" +
    "\062\070\072\071\067\072\071\073\060\074\066\075\073" +
    "\001\001\000\004\067\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\203\046\204\001\001\000\006" +
    "\051\175\053\174\001\001\000\010\030\155\052\157\054" +
    "\153\001\001\000\004\055\171\001\001\000\002\001\001" +
    "\000\012\036\165\037\047\040\044\047\050\001\001\000" +
    "\004\031\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\036\167" +
    "\037\047\040\044\047\050\001\001\000\002\001\001\000" +
    "\006\030\155\054\172\001\001\000\002\001\001\000\004" +
    "\055\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\030\155\036\177\037\047\040\044" +
    "\047\050\052\157\054\153\001\001\000\002\001\001\000" +
    "\004\031\162\001\001\000\002\001\001\000\074\015\233" +
    "\016\023\022\027\027\206\030\227\046\207\061\217\062" +
    "\056\063\062\066\232\070\072\071\067\072\071\073\060" +
    "\074\066\075\073\076\220\077\210\100\234\101\223\102" +
    "\216\103\226\105\214\107\213\110\212\111\231\113\224" +
    "\114\230\120\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\027\206\030\227\061\217\062" +
    "\056\063\062\066\232\070\072\071\067\072\071\073\060" +
    "\074\066\075\073\101\337\102\216\103\226\105\214\122" +
    "\340\123\341\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\027\206\030\227\061\322\062" +
    "\056\063\062\066\232\070\072\071\067\072\071\073\060" +
    "\074\066\075\073\101\321\102\216\103\226\105\214\001" +
    "\001\000\002\001\001\000\006\067\143\104\270\001\001" +
    "\000\072\015\233\016\023\022\027\027\206\030\227\046" +
    "\207\061\217\062\056\063\062\066\232\070\072\071\067" +
    "\072\071\073\060\074\066\075\073\076\220\077\320\101" +
    "\223\102\216\103\226\105\214\107\213\110\212\111\231" +
    "\113\224\114\230\120\205\001\001\000\026\061\140\062" +
    "\056\063\062\066\317\070\072\071\067\072\071\073\060" +
    "\074\066\075\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\027\206\030\227\061\264" +
    "\062\056\063\062\066\232\070\072\071\067\072\071\073" +
    "\060\074\066\075\073\101\263\102\216\103\226\105\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\033\242\034\245\106\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\061\140" +
    "\062\056\063\062\066\254\070\072\071\067\072\071\073" +
    "\060\074\066\075\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\061\261\062\056\063\062\070" +
    "\072\071\067\072\071\073\060\074\066\075\073\001\001" +
    "\000\002\001\001\000\010\115\273\116\313\117\272\001" +
    "\001\000\002\001\001\000\006\067\143\104\270\001\001" +
    "\000\010\115\273\116\275\117\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\115\273\116\300\117\272\001" +
    "\001\000\024\061\277\062\056\063\062\070\072\071\067" +
    "\072\071\073\060\074\066\075\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\015\233\016\023\022\027\027\206\030\227\046" +
    "\207\061\217\062\056\063\062\066\232\070\072\071\067" +
    "\072\071\073\060\074\066\075\073\076\220\077\210\100" +
    "\302\101\223\102\216\103\226\105\214\107\213\110\212" +
    "\111\231\113\224\114\230\120\205\001\001\000\002\001" +
    "\001\000\024\061\305\062\056\063\062\070\072\071\067" +
    "\072\071\073\060\074\066\075\073\001\001\000\010\115" +
    "\273\116\311\117\272\001\001\000\002\001\001\000\010" +
    "\115\273\116\307\117\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\046\323\067\143\104\270\001\001\000\002\001" +
    "\001\000\010\046\327\111\325\112\326\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\061" +
    "\331\062\056\063\062\070\072\071\067\072\071\073\060" +
    "\074\066\075\073\001\001\000\004\046\332\001\001\000" +
    "\002\001\001\000\010\046\327\111\325\112\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\350\001\001\000\002\001\001" +
    "\000\026\061\343\062\056\063\062\070\072\071\067\072" +
    "\071\073\060\074\066\075\073\121\344\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\027\206\030\227\061" +
    "\217\062\056\063\062\066\232\070\072\071\067\072\071" +
    "\073\060\074\066\075\073\101\346\102\216\103\226\105" +
    "\214\124\347\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\036" +
    "\373\037\047\040\044\047\050\001\001\000\002\001\001" +
    "\000\006\024\365\026\366\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\365\026\371\001\001\000\002\001\001\000\024\061" +
    "\376\062\056\063\062\070\072\071\067\072\071\073\060" +
    "\074\066\075\073\001\001\000\002\001\001\000\024\061" +
    "\375\062\056\063\062\070\072\071\067\072\071\073\060" +
    "\074\066\075\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\u0109\001" +
    "\001\000\012\042\u0108\044\u0106\050\u0107\051\151\001\001" +
    "\000\002\001\001\000\006\045\203\046\204\001\001\000" +
    "\002\001\001\000\012\042\u010b\044\u0106\050\u0107\051\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u011a\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\u010d\010\u0115\011\u0114\012\u010e\001" +
    "\001\000\004\012\u0113\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\u010d\010\u0118\011\u0114\012\u010e\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\u010d" +
    "\010\u0119\011\u0114\012\u010e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\021\014\u011c" +
    "\015\020\016\023\022\027\041\022\056\026\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


    // Connect this parser to a lexer!
    Lexer lexer;
    static String output;
    final static String delimiter = "§";
    parser(Lexer lexer){ this.lexer=lexer; }

    static int lastVar = 0;
    static int lastLabel = 0;
    static String newVar() {
      return "t" + lastVar++;
    }

    static String newLabel() {
      return "L" + lastLabel++;
    }

    public class SDD {
      public String address = "";
      public String code    = "";
      public String label   = "";

      public SDD() {}

      public SDD(String code) {
        this.code = code;
      }

      public SDD(SDD sdd) {
        this.address = sdd.address;
        this.code    = sdd.code;
      }

      public SDD(String address, String code) {
        this.address = address;
        this.code    = code;
      }

      public SDD(String address, String code, String label) {
        this.address = address;
        this.code    = code;
        this.label   = label;
      }

      public String toString() {
        return this.code;
      }

      public boolean hasAddress() {
        return this.address.length() > 0;
      }
    }

    public class ExpList {
      public ArrayList<SDD> list = new ArrayList<>();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= source_file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD start_val = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // source_file ::= package_clause import_decl_st top_level_decl_st 
            {
              SDD RESULT =null;
		int topleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int topright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD top = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      parser.output = top.code;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("source_file",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // source_file ::= package_clause SEMI_COLON import_decl_st top_level_decl_st 
            {
              SDD RESULT =null;
		int topleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int topright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD top = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      parser.output = top.code;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("source_file",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // package_clause ::= PACKAGE package_name 
            {
              SDD RESULT =null;
		
                     RESULT = new SDD();
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_clause",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_name ::= IDENTIFIER 
            {
              SDD RESULT =null;
		
                    RESULT = new SDD();
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_name",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // import_decl ::= IMPORT import_decl_grp 
            {
              SDD RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // import_decl_grp ::= import_spec 
            {
              SDD RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_decl_grp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_decl_grp ::= OPEN_PARAN import_spec_st CLOSE_PARAN 
            {
              SDD RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_decl_grp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_decl_st ::= import_decl import_decl_st 
            {
              SDD RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_decl_st",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_decl_st ::= import_decl SEMI_COLON import_decl_st 
            {
              SDD RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_decl_st",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // import_decl_st ::= 
            {
              SDD RESULT =null;
		
                      RESULT = new SDD();
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_decl_st",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // import_spec ::= DOT import_path 
            {
              SDD RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // import_spec ::= package_name import_path 
            {
              SDD RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // import_spec ::= import_path 
            {
              SDD RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // import_spec_st ::= import_spec import_spec_st 
            {
              SDD RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec_st",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // import_spec_st ::= import_spec SEMI_COLON import_spec_st 
            {
              SDD RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec_st",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // import_spec_st ::= 
            {
              SDD RESULT =null;
		
                       RESULT = new SDD();
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec_st",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // import_path ::= STRING_LIT 
            {
              SDD RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_path",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // top_level_decl ::= declaration 
            {
              SDD RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD d = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new SDD(d.code);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // top_level_decl ::= function_decl 
            {
              SDD RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD f = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new SDD(f.code);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // top_level_decl ::= function_decl SEMI_COLON 
            {
              SDD RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD f = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = new SDD(f.code);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // top_level_decl ::= method_decl 
            {
              SDD RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD m = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new SDD(m.code);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // top_level_decl ::= method_decl SEMI_COLON 
            {
              SDD RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD m = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = new SDD(m.code);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // top_level_decl_st ::= top_level_decl top_level_decl_st 
            {
              SDD RESULT =null;
		int topleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int topright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD top = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int top_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int top_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD top_st = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new SDD(top.code + top_st.code);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl_st",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // top_level_decl_st ::= 
            {
              SDD RESULT =null;
		
                        RESULT = new SDD();
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl_st",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration ::= const_decl SEMI_COLON 
            {
              SDD RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD c = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = new SDD(c.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration ::= var_decl SEMI_COLON 
            {
              SDD RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD v = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = new SDD(v.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // const_decl ::= CONST const_decl_grp 
            {
              SDD RESULT =null;
		int c_grpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_grpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD c_grp = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(c_grp.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // const_decl_grp ::= const_spec 
            {
              SDD RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD c = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(c.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_decl_grp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // const_decl_grp ::= OPEN_PARAN const_spec_st CLOSE_PARAN 
            {
              SDD RESULT =null;
		int c_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD c_st = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = new SDD(c_st.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_decl_grp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // const_spec ::= IDENTIFIER 
            {
              SDD RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(id);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // const_spec ::= IDENTIFIER EQUAL expression 
            {
              SDD RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(id + " = " + e.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // const_spec ::= IDENTIFIER type EQUAL expression 
            {
              SDD RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(id + " = " + e.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // const_spec_st ::= const_spec SEMI_COLON const_spec_st 
            {
              SDD RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD c = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD c_st = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(c_st.code + c.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec_st",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // const_spec_st ::= 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec_st",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_decl ::= VAR var_decl_grp 
            {
              SDD RESULT =null;
		int v_grpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v_grpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD v_grp = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(v_grp.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var_decl_grp ::= var_spec 
            {
              SDD RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD v = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(v.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_grp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_decl_grp ::= OPEN_PARAN var_spec_st CLOSE_PARAN 
            {
              SDD RESULT =null;
		int v_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD v_st = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = new SDD(v_st.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_grp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var_spec ::= IDENTIFIER type 
            {
              SDD RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = new SDD(id);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_spec ::= IDENTIFIER type EQUAL expression 
            {
              SDD RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            if (e.address.length() > 0) {
                              RESULT = new SDD(e.code + "\n" + id + " = " + e.address);
                            } else {
                              RESULT = new SDD(id + " = " + e.code);
                            }
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_spec ::= IDENTIFIER EQUAL expression 
            {
              SDD RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            if (e.address.length() > 0) {
                              RESULT = new SDD(e.code + "\n" + id + " = " + e.address);
                            } else {
                              RESULT = new SDD(id + " = " + e.code);
                            }
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_spec_st ::= var_spec SEMI_COLON var_spec_st 
            {
              SDD RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD v = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD v_st = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String res = v_st.code + v.code;
                            RESULT = new SDD(res);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec_st",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var_spec_st ::= 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec_st",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // short_var_decl ::= identifier_list COLON_EQUAL expression 
            {
              SDD RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD id = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            if (e.address.length() > 0) {
                              RESULT = new SDD(e.code + "\n" + id.code + " = " + e.address);
                            } else {
                              RESULT = new SDD(id.code + " = " + e.code);
                            }
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("short_var_decl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // identifier_list ::= IDENTIFIER identifier_st 
            {
              SDD RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD id_st = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(id + id_st.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // identifier_st ::= COMMA IDENTIFIER identifier_st 
            {
              SDD RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD id_st = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String res = id_st.code + "," + id;
                            RESULT = new SDD(res);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_st",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // identifier_st ::= 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_st",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_decl ::= FUNC function_name func_sign_grp 
            {
              SDD RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD name = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f_grpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f_grpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD f_grp = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD("\n" + name.code + ":" + "\nbegin_func;" + f_grp.code + "\nend_func;");
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // func_sign_grp ::= function 
            {
              SDD RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD f = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(f.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_sign_grp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // func_sign_grp ::= signature 
            {
              SDD RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD s = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(s.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_sign_grp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function_name ::= IDENTIFIER 
            {
              SDD RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(id);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_name",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // function ::= signature function_body 
            {
              SDD RESULT =null;
		int fbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD fb = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(fb.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // function_body ::= block 
            {
              SDD RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD b = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(b.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // method_decl ::= FUNC receiver method_name func_sign_grp 
            {
              SDD RESULT =null;
		
                            System.out.println("METHO");
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // receiver ::= parameters 
            {
              SDD RESULT =null;
		
                            System.out.println("PARAMS");
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiver",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // method_name ::= IDENTIFIER 
            {
              SDD RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(id);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_name",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // block ::= OPEN_CURLY statement_list CLOSE_CURLY 
            {
              SDD RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD st = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = new SDD(st);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= declaration 
            {
              SDD RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD d = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String newLine = (d.code.length() > 0) ? "\n" : "";
                            RESULT = new SDD(newLine + d.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= simple_stmt SEMI_COLON 
            {
              SDD RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD s = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            String newLine = (s.code.length() > 0) ? "\n" : "";
                            RESULT = new SDD(newLine + s.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= return_stmt SEMI_COLON 
            {
              SDD RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD r = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            String newLine = (r.code.length() > 0) ? "\n" : "";
                            RESULT = new SDD(newLine + r.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= break_stmt SEMI_COLON 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= block 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= block SEMI_COLON 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= if_stmt 
            {
              SDD RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD s = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(s.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= if_stmt SEMI_COLON 
            {
              SDD RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD s = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = new SDD(s.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= switch_stmt 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= switch_stmt SEMI_COLON 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= for_stmt 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= for_stmt SEMI_COLON 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement_list ::= statement_st 
            {
              SDD RESULT =null;
		int st_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD st_st = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(st_st.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement_st ::= statement statement_st 
            {
              SDD RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD st = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int st_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD st_st = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(st.code + st_st.code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_st",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement_st ::= 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_st",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // simple_stmt ::= expression_stmt 
            {
              SDD RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(e);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simple_stmt ::= inc_dec_stmt 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simple_stmt ::= assignment 
            {
              SDD RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD a = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(a);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_stmt ::= short_var_decl 
            {
              SDD RESULT =null;
		int shleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int shright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD sh = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(sh);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression_stmt ::= expression 
            {
              SDD RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(e);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // inc_dec_stmt ::= expression inc_dec_stmt_grp 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_dec_stmt",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // inc_dec_stmt_grp ::= INCREMENT 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_dec_stmt_grp",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // inc_dec_stmt_grp ::= DECREMENT 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_dec_stmt_grp",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignment ::= expression_list assign_op expression_list 
            {
              SDD RESULT =null;
		int el1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpList el1 = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD op = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int el2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int el2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList el2 = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            int min = Math.min(el1.list.size(), el2.list.size());
                            String res = "";
                            for (int i = 0; i < min; i++) {
                              SDD s1 = el1.list.get(i);
                              SDD s2 = el2.list.get(i);
                              if (s2.hasAddress()) {
                                res += s2.code;
                                res += "\n";
                                res += s1.code + " " + op + " " + s2.address;
                              } else {
                                res += s1.code + " " + op + " " + s2.code;
                              }
                              if (i != min - 1) {
                                res += "\n";
                              }
                            }
                            RESULT = new SDD(res);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assign_op ::= EQUAL 
            {
              SDD RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(e);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assign_op ::= add_op EQUAL 
            {
              SDD RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD op = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(op.code + e);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assign_op ::= mul_op EQUAL 
            {
              SDD RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD op = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(op.code + e);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if_stmt ::= IF expression block 
            {
              SDD RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD e = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD b = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String label = parser.newLabel();
                            String label1 = parser.newLabel();
                            RESULT = new SDD("\n" + e.code + "\n" + i + " " + e.address + " " + "Goto" + " " + label + "\n" + "Goto" + " " + label1 + "\n" + label + ":" + b.code + "\n" + label1 + ":");
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // if_stmt ::= IF expression block ELSE else_if_block_grp 
            {
              SDD RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SDD e = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD b = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD el = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String ifLabel = parser.newLabel();
                            String elseLabel = parser.newLabel();
                            String restLabel = parser.newLabel();
                            RESULT = new SDD("\n" + e.code + "\n" + i + " " + e.address + " " + "Goto" + " " + ifLabel + "\n" + "Goto" + " " + elseLabel + "\n" + ifLabel + ":" + b.code + "\n" + "Goto" + " " + restLabel + "\n" + elseLabel + ":" + el.code + "\n" + restLabel + ":");
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // if_stmt ::= IF simple_stmt SEMI_COLON expression block 
            {
              SDD RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SDD s = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD e = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD b = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String label = parser.newLabel();
                            String label1 = parser.newLabel();
                            RESULT = new SDD("\n" + s.code + "\n" + e.code + "\n" + i + " " + e.address + " " + "Goto" + " " + label + "\n" + "Goto" + " " + label1 + "\n" + label + ":" + b.code + "\n" + label1 + ":");
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if_stmt ::= IF simple_stmt SEMI_COLON expression block ELSE else_if_block_grp 
            {
              SDD RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		SDD s = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SDD e = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD b = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD el = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String ifLabel = parser.newLabel();
                            String elseLabel = parser.newLabel();
                            String restLabel = parser.newLabel();
                            RESULT = new SDD("\n" + s.code + "\n" + e.code + "\n" + i + " " + e.address + " " + "Goto" + " " + ifLabel + "\n" + "Goto" + " " + elseLabel + "\n" + ifLabel + ":" + b.code + "\n" + "Goto" + " " + restLabel + "\n" + elseLabel + ":" + el.code + "\n" + restLabel + ":");
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // else_if_block_grp ::= if_stmt 
            {
              SDD RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD i = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(i);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_block_grp",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // else_if_block_grp ::= block 
            {
              SDD RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD b = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(b);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_block_grp",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // switch_stmt ::= expr_switch_stmt 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr_switch_stmt ::= SWITCH OPEN_CURLY expr_case_clause_st CLOSE_CURLY 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr_switch_stmt ::= SWITCH expression OPEN_CURLY expr_case_clause_st CLOSE_CURLY 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr_switch_stmt ::= SWITCH simple_stmt SEMI_COLON OPEN_CURLY expr_case_clause_st CLOSE_CURLY 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr_switch_stmt ::= SWITCH simple_stmt SEMI_COLON expression OPEN_CURLY expr_case_clause_st CLOSE_CURLY 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr_case_clause ::= expr_switch_case COLON statement_list 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_case_clause",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr_case_clause_st ::= expr_case_clause expr_case_clause_st 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_case_clause_st",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr_case_clause_st ::= 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_case_clause_st",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_switch_case ::= CASE expression 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_case",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_switch_case ::= DEFAULT 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_case",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // for_stmt ::= FOR for_clause block 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // condition ::= expression 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for_clause ::= init_stmt SEMI_COLON condition SEMI_COLON post_stmt 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_clause",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // init_stmt ::= simple_stmt 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_stmt",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // post_stmt ::= simple_stmt 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("post_stmt",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // break_stmt ::= BREAK 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // return_stmt ::= RETURN 
            {
              SDD RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(r);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // return_stmt ::= RETURN expression_list 
            {
              SDD RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String expList = "";
                            for (SDD sdd : el.list) {
                              expList += sdd.code + ",";
                            }
                            expList = expList.substring(0, expList.length() - 1);
                            RESULT = new SDD(r + " " + expList);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // type ::= type_name 
            {
              SDD RESULT =null;
		
                    RESULT = new SDD();
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // type ::= type_lit 
            {
              SDD RESULT =null;
		
                    RESULT = new SDD();
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // type_name ::= IDENTIFIER 
            {
              SDD RESULT =null;
		
                    RESULT = new SDD();
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_name",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // type_lit ::= function_type 
            {
              SDD RESULT =null;
		
                    RESULT = new SDD();
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_lit",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // function_type ::= FUNC signature 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // signature ::= parameters 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // signature ::= parameters result 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // result ::= parameters 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // result ::= OPEN_PARAN type CLOSE_PARAN 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // parameters ::= OPEN_PARAN CLOSE_PARAN 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // parameters ::= OPEN_PARAN parameter_list CLOSE_PARAN 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parameter_list ::= parameter_decl parameter_decl_st 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parameter_decl ::= identifier_list type 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_decl",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parameter_decl ::= identifier_list CDOTS type 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_decl",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parameter_decl_st ::= COMMA parameter_decl parameter_decl_st 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_decl_st",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parameter_decl_st ::= 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_decl_st",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= unary_expr 
            {
              SDD RESULT =null;
		int un_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int un_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD un_exp = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(un_exp);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= expression REL_OP expression 
            {
              SDD RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD e1 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e2 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String temp = parser.newVar();
                            String code = temp + " = " + e1.code + " " + op + " " + e2.code;
                            if (e1.address.length() > 0 && e2.address.length() > 0) {
                              code = e1.code + "\n" + e2.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.address;
                            } else if (e1.address.length() > 0) {
                              code = e1.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.code;
                            } else if (e2.address.length() > 0) {
                              code = e2.code + "\n" + temp + " = " + e1.code + " " + op + " " + e2.address;
                            }
                            RESULT = new SDD(temp, code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= expression OR_OP expression 
            {
              SDD RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD e1 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e2 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String temp = parser.newVar();
                            String code = temp + " = " + e1.code + " " + op + " " + e2.code;
                            if (e1.address.length() > 0 && e2.address.length() > 0) {
                              code = e1.code + "\n" + e2.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.address;
                            } else if (e1.address.length() > 0) {
                              code = e1.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.code;
                            } else if (e2.address.length() > 0) {
                              code = e2.code + "\n" + temp + " = " + e1.code + " " + op + " " + e2.address;
                            }
                            RESULT = new SDD(temp, code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= expression AND_OP expression 
            {
              SDD RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD e1 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e2 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String temp = parser.newVar();
                            String code = temp + " = " + e1.code + " " + op + " " + e2.code;
                            if (e1.address.length() > 0 && e2.address.length() > 0) {
                              code = e1.code + "\n" + e2.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.address;
                            } else if (e1.address.length() > 0) {
                              code = e1.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.code;
                            } else if (e2.address.length() > 0) {
                              code = e2.code + "\n" + temp + " = " + e1.code + " " + op + " " + e2.address;
                            }
                            RESULT = new SDD(temp, code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= expression PLUS expression 
            {
              SDD RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD e1 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e2 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String temp = parser.newVar();
                            String code = temp + " = " + e1.code + " " + op + " " + e2.code;
                            if (e1.address.length() > 0 && e2.address.length() > 0) {
                              code = e1.code + "\n" + e2.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.address;
                            } else if (e1.address.length() > 0) {
                              code = e1.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.code;
                            } else if (e2.address.length() > 0) {
                              code = e2.code + "\n" + temp + " = " + e1.code + " " + op + " " + e2.address;
                            }
                            RESULT = new SDD(temp, code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= expression MINUS expression 
            {
              SDD RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD e1 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e2 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String temp = parser.newVar();
                            String code = temp + " = " + e1.code + " " + op + " " + e2.code;
                            if (e1.address.length() > 0 && e2.address.length() > 0) {
                              code = e1.code + "\n" + e2.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.address;
                            } else if (e1.address.length() > 0) {
                              code = e1.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.code;
                            } else if (e2.address.length() > 0) {
                              code = e2.code + "\n" + temp + " = " + e1.code + " " + op + " " + e2.address;
                            }
                            RESULT = new SDD(temp, code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= expression ASTRISK expression 
            {
              SDD RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD e1 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e2 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String temp = parser.newVar();
                            String code = temp + " = " + e1.code + " " + op + " " + e2.code;
                            if (e1.address.length() > 0 && e2.address.length() > 0) {
                              code = e1.code + "\n" + e2.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.address;
                            } else if (e1.address.length() > 0) {
                              code = e1.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.code;
                            } else if (e2.address.length() > 0) {
                              code = e2.code + "\n" + temp + " = " + e1.code + " " + op + " " + e2.address;
                            }
                            RESULT = new SDD(temp, code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= expression SLASH expression 
            {
              SDD RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD e1 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e2 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String temp = parser.newVar();
                            String code = temp + " = " + e1.code + " " + op + " " + e2.code;
                            if (e1.address.length() > 0 && e2.address.length() > 0) {
                              code = e1.code + "\n" + e2.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.address;
                            } else if (e1.address.length() > 0) {
                              code = e1.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.code;
                            } else if (e2.address.length() > 0) {
                              code = e2.code + "\n" + temp + " = " + e1.code + " " + op + " " + e2.address;
                            }
                            RESULT = new SDD(temp, code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= expression PERCENT expression 
            {
              SDD RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD e1 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e2 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String temp = parser.newVar();
                            String code = temp + " = " + e1.code + " " + op + " " + e2.code;
                            if (e1.address.length() > 0 && e2.address.length() > 0) {
                              code = e1.code + "\n" + e2.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.address;
                            } else if (e1.address.length() > 0) {
                              code = e1.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.code;
                            } else if (e2.address.length() > 0) {
                              code = e2.code + "\n" + temp + " = " + e1.code + " " + op + " " + e2.address;
                            }
                            RESULT = new SDD(temp, code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression ::= expression SHIFT_LEFT expression 
            {
              SDD RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD e1 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e2 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String temp = parser.newVar();
                            String code = temp + " = " + e1.code + " " + op + " " + e2.code;
                            if (e1.address.length() > 0 && e2.address.length() > 0) {
                              code = e1.code + "\n" + e2.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.address;
                            } else if (e1.address.length() > 0) {
                              code = e1.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.code;
                            } else if (e2.address.length() > 0) {
                              code = e2.code + "\n" + temp + " = " + e1.code + " " + op + " " + e2.address;
                            }
                            RESULT = new SDD(temp, code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression ::= expression SHIFT_RIGHT expression 
            {
              SDD RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD e1 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e2 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String temp = parser.newVar();
                            String code = temp + " = " + e1.code + " " + op + " " + e2.code;
                            if (e1.address.length() > 0 && e2.address.length() > 0) {
                              code = e1.code + "\n" + e2.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.address;
                            } else if (e1.address.length() > 0) {
                              code = e1.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.code;
                            } else if (e2.address.length() > 0) {
                              code = e2.code + "\n" + temp + " = " + e1.code + " " + op + " " + e2.address;
                            }
                            RESULT = new SDD(temp, code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression ::= expression AMBERSAND expression 
            {
              SDD RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD e1 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e2 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String temp = parser.newVar();
                            String code = temp + " = " + e1.code + " " + op + " " + e2.code;
                            if (e1.address.length() > 0 && e2.address.length() > 0) {
                              code = e1.code + "\n" + e2.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.address;
                            } else if (e1.address.length() > 0) {
                              code = e1.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.code;
                            } else if (e2.address.length() > 0) {
                              code = e2.code + "\n" + temp + " = " + e1.code + " " + op + " " + e2.address;
                            }
                            RESULT = new SDD(temp, code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression ::= expression EXCLAMATION expression 
            {
              SDD RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SDD e1 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD e2 = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String temp = parser.newVar();
                            String code = temp + " = " + e1.code + " " + op + " " + e2.code;
                            if (e1.address.length() > 0 && e2.address.length() > 0) {
                              code = e1.code + "\n" + e2.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.address;
                            } else if (e1.address.length() > 0) {
                              code = e1.code + "\n" + temp + " = " + e1.address + " " + op + " " + e2.code;
                            } else if (e2.address.length() > 0) {
                              code = e2.code + "\n" + temp + " = " + e1.code + " " + op + " " + e2.address;
                            }
                            RESULT = new SDD(temp, code);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression_list ::= expression expression_st 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD e = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList e_st = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            // String res = e.code + e_st.code;
                            e_st.list.add(0, e);
                            RESULT = e_st;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression_st ::= COMMA expression expression_st 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD e = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList e_st = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            e_st.list.add(e);
                            // String res = e_st.code + parser.delimiter + e.code;
                            RESULT = e_st;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_st",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression_st ::= 
            {
              ExpList RESULT =null;
		
                            RESULT = new ExpList();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_st",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // unary_expr ::= primary_expr 
            {
              SDD RESULT =null;
		int p_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD p_exp = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(p_exp);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // unary_expr ::= MINUS unary_expr 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // unary_expr ::= EXCLAMATION unary_expr 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // unary_expr ::= ASTRISK unary_expr 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // primary_expr ::= operand 
            {
              SDD RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD op = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(op);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // primary_expr ::= primary_expr selector 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // primary_expr ::= primary_expr arguments 
            {
              SDD RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD p = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList a = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            // String[] params = a.code.split(parser.delimiter);
                            String paramString = "";
                            // int i = 0;
                            for (SDD sdd : a.list) {

                              if (sdd.address.length() > 0) {
                                paramString += sdd.code;
                                paramString += "\n";
                                paramString += "push_params: " + sdd.address;
                              } else {
                                paramString += "push_params: " + sdd.code;
                              }
                              paramString += "\n";
                            }
                            String t = parser.newVar();
                            String pop = (a.list.size() > 0) ? "\npop_params;" : "" ;
                            RESULT = new SDD(t, paramString + t + " = " + "call " + p.code + pop);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // operand ::= literal 
            {
              SDD RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD lit = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(lit);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // operand ::= operand_name 
            {
              SDD RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD op = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(op);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // operand ::= OPEN_PARAN expression CLOSE_PARAN 
            {
              SDD RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SDD e = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = new SDD(e);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // literal ::= basic_lit 
            {
              SDD RESULT =null;
		int b_litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b_litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD b_lit = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(b_lit);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // literal ::= function_lit 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // basic_lit ::= INT_LIT 
            {
              SDD RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(i);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_lit",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // basic_lit ::= STRING_LIT 
            {
              SDD RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(s);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_lit",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // function_lit ::= FUNC function 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_lit",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // selector ::= DOT IDENTIFIER 
            {
              SDD RESULT =null;
		
                            RESULT = new SDD();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // arguments ::= OPEN_PARAN CLOSE_PARAN 
            {
              ExpList RESULT =null;
		
                            RESULT = new ExpList();
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // arguments ::= OPEN_PARAN expression_list CLOSE_PARAN 
            {
              ExpList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = el;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // operand_name ::= IDENTIFIER 
            {
              SDD RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(id);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand_name",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // operand_name ::= qualified_ident 
            {
              SDD RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SDD id = (SDD)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(id);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand_name",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // qualified_ident ::= DOT package_name DOT IDENTIFIER 
            {
              SDD RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new SDD(id);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualified_ident",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // add_op ::= PLUS 
            {
              SDD RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SDD(op);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // add_op ::= MINUS 
            {
              SDD RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SDD(op);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // add_op ::= BAR 
            {
              SDD RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SDD(op);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // mul_op ::= ASTRISK 
            {
              SDD RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SDD(op);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // mul_op ::= SLASH 
            {
              SDD RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SDD(op);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // mul_op ::= PERCENT 
            {
              SDD RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SDD(op);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // mul_op ::= SHIFT_LEFT 
            {
              SDD RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SDD(op);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // mul_op ::= SHIFT_RIGHT 
            {
              SDD RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SDD(op);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // mul_op ::= AMBERSAND 
            {
              SDD RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SDD(op);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

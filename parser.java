
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\002\004\000\002\002\005\000\002\002" +
    "\006\000\002\004\004\000\002\005\003\000\002\006\004" +
    "\000\002\007\003\000\002\007\005\000\002\003\004\000" +
    "\002\003\005\000\002\003\002\000\002\011\004\000\002" +
    "\011\004\000\002\011\003\000\002\010\004\000\002\010" +
    "\005\000\002\010\002\000\002\012\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\004\000\002\013\003\000" +
    "\002\013\004\000\002\014\004\000\002\014\002\000\002" +
    "\015\004\000\002\015\004\000\002\016\004\000\002\017" +
    "\003\000\002\017\005\000\002\020\003\000\002\020\005" +
    "\000\002\020\006\000\002\021\005\000\002\021\002\000" +
    "\002\022\004\000\002\023\003\000\002\023\005\000\002" +
    "\024\004\000\002\025\003\000\002\025\005\000\002\025" +
    "\004\000\002\025\002\000\002\026\005\000\002\026\002" +
    "\000\002\027\005\000\002\030\004\000\002\031\005\000" +
    "\002\031\002\000\002\041\005\000\002\042\003\000\002" +
    "\042\003\000\002\043\003\000\002\044\004\000\002\045" +
    "\003\000\002\056\006\000\002\060\003\000\002\057\003" +
    "\000\002\046\005\000\002\076\003\000\002\076\004\000" +
    "\002\076\004\000\002\076\004\000\002\076\003\000\002" +
    "\076\004\000\002\076\003\000\002\076\004\000\002\076" +
    "\003\000\002\076\004\000\002\076\003\000\002\076\004" +
    "\000\002\100\003\000\002\077\004\000\002\077\002\000" +
    "\002\101\003\000\002\101\003\000\002\101\003\000\002" +
    "\101\003\000\002\102\003\000\002\103\004\000\002\104" +
    "\003\000\002\104\003\000\002\105\005\000\002\106\003" +
    "\000\002\106\004\000\002\106\004\000\002\111\005\000" +
    "\002\111\007\000\002\111\007\000\002\111\011\000\002" +
    "\112\003\000\002\112\003\000\002\113\003\000\002\114" +
    "\006\000\002\114\007\000\002\114\010\000\002\114\011" +
    "\000\002\115\005\000\002\116\004\000\002\116\002\000" +
    "\002\117\004\000\002\117\003\000\002\120\005\000\002" +
    "\121\003\000\002\122\007\000\002\123\003\000\002\124" +
    "\003\000\002\110\003\000\002\107\003\000\002\107\004" +
    "\000\002\036\003\000\002\036\003\000\002\037\003\000" +
    "\002\040\003\000\002\047\004\000\002\050\003\000\002" +
    "\050\004\000\002\053\003\000\002\053\005\000\002\051" +
    "\004\000\002\051\005\000\002\052\004\000\002\054\004" +
    "\000\002\054\005\000\002\055\005\000\002\055\002\000" +
    "\002\061\003\000\002\061\005\000\002\062\004\000\002" +
    "\063\005\000\002\063\002\000\002\064\003\000\002\064" +
    "\004\000\002\065\003\000\002\065\004\000\002\065\004" +
    "\000\002\070\003\000\002\070\003\000\002\070\005\000" +
    "\002\071\003\000\002\071\003\000\002\074\003\000\002" +
    "\074\003\000\002\075\004\000\002\066\004\000\002\067" +
    "\004\000\002\067\005\000\002\072\003\000\002\072\003" +
    "\000\002\073\006\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\004\005\006\001\002\000\004\002\u0110\001" +
    "\002\000\016\002\ufff7\006\012\013\ufff7\014\ufff7\021\ufff7" +
    "\043\011\001\002\000\004\007\010\001\002\000\016\002" +
    "\ufffe\006\ufffe\013\ufffe\014\ufffe\021\ufffe\043\ufffe\001\002" +
    "\000\022\002\ufffd\006\ufffd\010\ufffd\013\ufffd\014\ufffd\021" +
    "\ufffd\041\ufffd\043\ufffd\001\002\000\014\002\ufff7\006\012" +
    "\013\ufff7\014\ufff7\021\ufff7\001\002\000\012\007\010\010" +
    "\u0102\041\u0104\055\u0103\001\002\000\012\002\uffe9\013\031" +
    "\014\025\021\020\001\002\000\016\002\ufff7\006\012\013" +
    "\ufff7\014\ufff7\021\ufff7\043\015\001\002\000\014\002\ufff7" +
    "\006\012\013\ufff7\014\ufff7\021\ufff7\001\002\000\012\002" +
    "\ufff9\013\ufff9\014\ufff9\021\ufff9\001\002\000\012\002\ufff8" +
    "\013\ufff8\014\ufff8\021\ufff8\001\002\000\006\007\366\055" +
    "\147\001\002\000\012\002\uffef\013\uffef\014\uffef\021\uffef" +
    "\001\002\000\012\002\uffe9\013\031\014\025\021\020\001" +
    "\002\000\014\002\uffee\013\uffee\014\uffee\021\uffee\043\363" +
    "\001\002\000\004\043\362\001\002\000\006\007\343\055" +
    "\345\001\002\000\004\002\000\001\002\000\014\002\uffec" +
    "\013\uffec\014\uffec\021\uffec\043\342\001\002\000\004\043" +
    "\341\001\002\000\006\007\033\055\034\001\002\000\004" +
    "\043\uffe6\001\002\000\012\007\050\021\043\043\uffe3\052" +
    "\044\001\002\000\006\007\033\056\uffdf\001\002\000\004" +
    "\043\uffe5\001\002\000\004\043\041\001\002\000\004\056" +
    "\040\001\002\000\004\043\uffe4\001\002\000\006\007\033" +
    "\056\uffdf\001\002\000\004\056\uffe0\001\002\000\004\055" +
    "\147\001\002\000\032\007\057\010\053\011\074\021\064" +
    "\036\066\041\071\045\054\046\060\047\056\053\055\054" +
    "\070\055\067\001\002\000\012\042\uff92\043\uff92\052\uff92" +
    "\056\uff92\001\002\000\004\052\052\001\002\000\012\042" +
    "\uff93\043\uff93\052\uff93\056\uff93\001\002\000\012\042\uff91" +
    "\043\uff91\052\uff91\056\uff91\001\002\000\012\042\uff90\043" +
    "\uff90\052\uff90\056\uff90\001\002\000\032\007\057\010\053" +
    "\011\074\021\064\036\066\041\071\045\054\046\060\047" +
    "\056\053\055\054\070\055\067\001\002\000\056\027\uff73" +
    "\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\037\uff73\040" +
    "\uff73\041\uff73\042\uff73\043\uff73\044\uff73\046\uff73\047\uff73" +
    "\050\uff73\051\uff73\052\uff73\053\uff73\054\uff73\055\uff73\056" +
    "\uff73\057\uff73\001\002\000\032\007\uff5b\010\uff5b\011\uff5b" +
    "\021\uff5b\036\uff5b\041\uff5b\045\uff5b\046\uff5b\047\uff5b\053" +
    "\uff5b\054\uff5b\055\uff5b\001\002\000\032\007\uff5d\010\uff5d" +
    "\011\uff5d\021\uff5d\036\uff5d\041\uff5d\045\uff5d\046\uff5d\047" +
    "\uff5d\053\uff5d\054\uff5d\055\uff5d\001\002\000\032\007\uff59" +
    "\010\uff59\011\uff59\021\uff59\036\uff59\041\uff59\045\uff59\046" +
    "\uff59\047\uff59\053\uff59\054\uff59\055\uff59\001\002\000\056" +
    "\027\uff6e\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\037" +
    "\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e\044\uff6e\046\uff6e" +
    "\047\uff6e\050\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\055" +
    "\uff6e\056\uff6e\057\uff6e\001\002\000\032\007\uff5a\010\uff5a" +
    "\011\uff5a\021\uff5a\036\uff5a\041\uff5a\045\uff5a\046\uff5a\047" +
    "\uff5a\053\uff5a\054\uff5a\055\uff5a\001\002\000\052\027\uff83" +
    "\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\037\uff83\040" +
    "\uff83\042\uff83\043\uff83\044\uff83\046\uff83\047\uff83\050\uff83" +
    "\051\uff83\052\uff83\053\uff83\054\uff83\056\uff83\057\uff83\001" +
    "\002\000\034\033\110\034\125\035\117\037\123\040\112" +
    "\043\uffe1\044\114\046\124\047\121\050\113\051\107\053" +
    "\120\054\106\001\002\000\056\027\uff6d\031\uff6d\032\uff6d" +
    "\033\uff6d\034\uff6d\035\uff6d\037\uff6d\040\uff6d\041\uff6d\042" +
    "\uff6d\043\uff6d\044\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d" +
    "\052\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d\001" +
    "\002\000\004\055\147\001\002\000\056\027\uff7e\031\uff7e" +
    "\032\uff7e\033\uff7e\034\uff7e\035\uff7e\037\uff7e\040\uff7e\041" +
    "\132\042\uff7e\043\uff7e\044\uff7e\046\uff7e\047\uff7e\050\uff7e" +
    "\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\131\056\uff7e\057" +
    "\uff7e\001\002\000\032\007\uff58\010\uff58\011\uff58\021\uff58" +
    "\036\uff58\041\uff58\045\uff58\046\uff58\047\uff58\053\uff58\054" +
    "\uff58\055\uff58\001\002\000\032\007\057\010\053\011\074" +
    "\021\064\036\066\041\071\045\054\046\060\047\056\053" +
    "\055\054\070\055\067\001\002\000\032\007\uff5c\010\uff5c" +
    "\011\uff5c\021\uff5c\036\uff5c\041\uff5c\045\uff5c\046\uff5c\047" +
    "\uff5c\053\uff5c\054\uff5c\055\uff5c\001\002\000\004\007\010" +
    "\001\002\000\056\027\uff76\031\uff76\032\uff76\033\uff76\034" +
    "\uff76\035\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043\uff76" +
    "\044\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053" +
    "\uff76\054\uff76\055\uff76\056\uff76\057\uff76\001\002\000\056" +
    "\027\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035\uff79\037" +
    "\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\046\uff79" +
    "\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055" +
    "\uff79\056\uff79\057\uff79\001\002\000\056\027\uff74\031\uff74" +
    "\032\uff74\033\uff74\034\uff74\035\uff74\037\uff74\040\uff74\041" +
    "\uff74\042\uff74\043\uff74\044\uff74\046\uff74\047\uff74\050\uff74" +
    "\051\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057" +
    "\uff74\001\002\000\056\027\uff78\031\uff78\032\uff78\033\uff78" +
    "\034\uff78\035\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043" +
    "\uff78\044\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78" +
    "\053\uff78\054\uff78\055\uff78\056\uff78\057\uff78\001\002\000" +
    "\056\027\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c" +
    "\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\046" +
    "\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c" +
    "\055\uff7c\056\uff7c\057\uff7c\001\002\000\056\027\uff75\031" +
    "\uff75\032\uff75\033\uff75\034\uff75\035\uff75\037\uff75\040\uff75" +
    "\041\uff75\042\uff75\043\uff75\044\uff75\046\uff75\047\uff75\050" +
    "\uff75\051\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75" +
    "\057\uff75\001\002\000\032\007\057\010\053\011\074\021" +
    "\064\036\066\041\071\045\054\046\060\047\056\053\055" +
    "\054\070\055\067\001\002\000\052\027\uff7d\031\uff7d\032" +
    "\uff7d\033\uff7d\034\uff7d\035\uff7d\037\uff7d\040\uff7d\042\uff7d" +
    "\043\uff7d\044\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052" +
    "\uff7d\053\uff7d\054\uff7d\056\uff7d\057\uff7d\001\002\000\004" +
    "\041\103\001\002\000\004\007\104\001\002\000\056\027" +
    "\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c\037\uff6c" +
    "\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044\uff6c\046\uff6c\047" +
    "\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c" +
    "\056\uff6c\057\uff6c\001\002\000\034\033\110\034\125\035" +
    "\117\037\123\040\112\044\114\046\124\047\121\050\113" +
    "\051\107\053\120\054\106\056\116\001\002\000\034\007" +
    "\uff65\010\uff65\011\uff65\021\uff65\036\uff65\041\uff65\045\uff65" +
    "\046\uff65\047\uff65\052\uff65\053\uff65\054\uff65\055\uff65\001" +
    "\002\000\034\007\uff62\010\uff62\011\uff62\021\uff62\036\uff62" +
    "\041\uff62\045\uff62\046\uff62\047\uff62\052\uff62\053\uff62\054" +
    "\uff62\055\uff62\001\002\000\032\007\uff69\010\uff69\011\uff69" +
    "\021\uff69\036\uff69\041\uff69\045\uff69\046\uff69\047\uff69\053" +
    "\uff69\054\uff69\055\uff69\001\002\000\032\007\uff68\010\uff68" +
    "\011\uff68\021\uff68\036\uff68\041\uff68\045\uff68\046\uff68\047" +
    "\uff68\053\uff68\054\uff68\055\uff68\001\002\000\034\007\uff5f" +
    "\010\uff5f\011\uff5f\021\uff5f\036\uff5f\041\uff5f\045\uff5f\046" +
    "\uff5f\047\uff5f\052\uff5f\053\uff5f\054\uff5f\055\uff5f\001\002" +
    "\000\034\007\uff64\010\uff64\011\uff64\021\uff64\036\uff64\041" +
    "\uff64\045\uff64\046\uff64\047\uff64\052\uff64\053\uff64\054\uff64" +
    "\055\uff64\001\002\000\034\007\uff61\010\uff61\011\uff61\021" +
    "\uff61\036\uff61\041\uff61\045\uff61\046\uff61\047\uff61\052\uff61" +
    "\053\uff61\054\uff61\055\uff61\001\002\000\032\007\uff67\010" +
    "\uff67\011\uff67\021\uff67\036\uff67\041\uff67\045\uff67\046\uff67" +
    "\047\uff67\053\uff67\054\uff67\055\uff67\001\002\000\056\027" +
    "\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77\037\uff77" +
    "\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77\046\uff77\047" +
    "\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054\uff77\055\uff77" +
    "\056\uff77\057\uff77\001\002\000\032\007\uff6b\010\uff6b\011" +
    "\uff6b\021\uff6b\036\uff6b\041\uff6b\045\uff6b\046\uff6b\047\uff6b" +
    "\053\uff6b\054\uff6b\055\uff6b\001\002\000\034\007\uff66\010" +
    "\uff66\011\uff66\021\uff66\036\uff66\041\uff66\045\uff66\046\uff66" +
    "\047\uff66\052\uff66\053\uff66\054\uff66\055\uff66\001\002\000" +
    "\034\007\uff5e\010\uff5e\011\uff5e\021\uff5e\036\uff5e\041\uff5e" +
    "\045\uff5e\046\uff5e\047\uff5e\052\uff5e\053\uff5e\054\uff5e\055" +
    "\uff5e\001\002\000\032\007\057\010\053\011\074\021\064" +
    "\036\066\041\071\045\054\046\060\047\056\053\055\054" +
    "\070\055\067\001\002\000\034\007\uff60\010\uff60\011\uff60" +
    "\021\uff60\036\uff60\041\uff60\045\uff60\046\uff60\047\uff60\052" +
    "\uff60\053\uff60\054\uff60\055\uff60\001\002\000\034\007\uff63" +
    "\010\uff63\011\uff63\021\uff63\036\uff63\041\uff63\045\uff63\046" +
    "\uff63\047\uff63\052\uff63\053\uff63\054\uff63\055\uff63\001\002" +
    "\000\032\007\uff6a\010\uff6a\011\uff6a\021\uff6a\036\uff6a\041" +
    "\uff6a\045\uff6a\046\uff6a\047\uff6a\053\uff6a\054\uff6a\055\uff6a" +
    "\001\002\000\052\027\uff82\031\uff82\032\uff82\033\110\034" +
    "\125\035\117\037\123\040\112\042\uff82\043\uff82\044\114" +
    "\046\124\047\121\050\113\051\107\052\uff82\053\120\054" +
    "\106\056\uff82\057\uff82\001\002\000\056\027\uff7b\031\uff7b" +
    "\032\uff7b\033\uff7b\034\uff7b\035\uff7b\037\uff7b\040\uff7b\041" +
    "\uff7b\042\uff7b\043\uff7b\044\uff7b\046\uff7b\047\uff7b\050\uff7b" +
    "\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\057" +
    "\uff7b\001\002\000\056\027\uff7a\031\uff7a\032\uff7a\033\uff7a" +
    "\034\uff7a\035\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043" +
    "\uff7a\044\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a" +
    "\053\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\001\002\000" +
    "\034\007\057\010\053\011\074\021\064\036\066\041\071" +
    "\045\054\046\060\047\056\053\055\054\070\055\067\056" +
    "\134\001\002\000\004\007\133\001\002\000\056\027\uff71" +
    "\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71\037\uff71\040" +
    "\uff71\041\uff71\042\uff71\043\uff71\044\uff71\046\uff71\047\uff71" +
    "\050\uff71\051\uff71\052\uff71\053\uff71\054\uff71\055\uff71\056" +
    "\uff71\057\uff71\001\002\000\056\027\uff70\031\uff70\032\uff70" +
    "\033\uff70\034\uff70\035\uff70\037\uff70\040\uff70\041\uff70\042" +
    "\uff70\043\uff70\044\uff70\046\uff70\047\uff70\050\uff70\051\uff70" +
    "\052\uff70\053\uff70\054\uff70\055\uff70\056\uff70\057\uff70\001" +
    "\002\000\042\033\110\034\125\035\117\037\123\040\112" +
    "\042\141\043\uff7f\044\114\046\124\047\121\050\113\051" +
    "\107\053\120\054\106\056\uff7f\057\uff7f\001\002\000\004" +
    "\056\137\001\002\000\056\027\uff6f\031\uff6f\032\uff6f\033" +
    "\uff6f\034\uff6f\035\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f" +
    "\043\uff6f\044\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052" +
    "\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f\001\002" +
    "\000\034\037\uff81\040\uff81\043\uff81\044\uff81\046\uff81\047" +
    "\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81\056\uff81" +
    "\057\uff81\001\002\000\032\007\057\010\053\011\074\021" +
    "\064\036\066\041\071\045\054\046\060\047\056\053\055" +
    "\054\070\055\067\001\002\000\044\033\110\034\125\035" +
    "\117\037\123\040\112\042\141\043\uff7f\044\114\046\124" +
    "\047\121\050\113\051\107\052\uff7f\053\120\054\106\056" +
    "\uff7f\057\uff7f\001\002\000\034\037\uff80\040\uff80\043\uff80" +
    "\044\uff80\046\uff80\047\uff80\050\uff80\051\uff80\052\uff80\053" +
    "\uff80\054\uff80\056\uff80\057\uff80\001\002\000\056\027\uff72" +
    "\031\uff72\032\uff72\033\uff72\034\uff72\035\uff72\037\uff72\040" +
    "\uff72\041\uff72\042\uff72\043\uff72\044\uff72\046\uff72\047\uff72" +
    "\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056" +
    "\uff72\057\uff72\001\002\000\004\057\177\001\002\000\026" +
    "\002\uff8e\013\uff8e\014\uff8e\021\uff8e\042\uff8e\043\uff8e\052" +
    "\uff8e\055\173\056\uff8e\057\uff8e\001\002\000\006\007\153" +
    "\056\151\001\002\000\006\042\165\056\uff84\001\002\000" +
    "\030\002\uff8a\007\uff8a\013\uff8a\014\uff8a\021\uff8a\042\uff8a" +
    "\043\uff8a\052\uff8a\055\uff8a\056\uff8a\057\uff8a\001\002\000" +
    "\010\007\050\021\043\063\163\001\002\000\012\007\uffd1" +
    "\021\uffd1\042\156\063\uffd1\001\002\000\004\056\155\001" +
    "\002\000\030\002\uff89\007\uff89\013\uff89\014\uff89\021\uff89" +
    "\042\uff89\043\uff89\052\uff89\055\uff89\056\uff89\057\uff89\001" +
    "\002\000\004\007\160\001\002\000\012\007\uffd3\021\uffd3" +
    "\030\uffd3\063\uffd3\001\002\000\014\007\uffd1\021\uffd1\030" +
    "\uffd1\042\156\063\uffd1\001\002\000\012\007\uffd2\021\uffd2" +
    "\030\uffd2\063\uffd2\001\002\000\006\042\uff87\056\uff87\001" +
    "\002\000\006\007\050\021\043\001\002\000\006\042\uff86" +
    "\056\uff86\001\002\000\004\007\153\001\002\000\004\056" +
    "\uff88\001\002\000\006\042\165\056\uff84\001\002\000\004" +
    "\056\uff85\001\002\000\024\002\uff8d\013\uff8d\014\uff8d\021" +
    "\uff8d\042\uff8d\043\uff8d\052\uff8d\056\uff8d\057\uff8d\001\002" +
    "\000\024\002\uff8c\013\uff8c\014\uff8c\021\uff8c\042\uff8c\043" +
    "\uff8c\052\uff8c\056\uff8c\057\uff8c\001\002\000\010\007\175" +
    "\021\043\056\151\001\002\000\004\056\176\001\002\000" +
    "\014\007\uffd1\021\uffd1\042\156\056\uff91\063\uffd1\001\002" +
    "\000\024\002\uff8b\013\uff8b\014\uff8b\021\uff8b\042\uff8b\043" +
    "\uff8b\052\uff8b\056\uff8b\057\uff8b\001\002\000\054\007\232" +
    "\010\053\011\074\012\206\013\031\014\025\015\212\017" +
    "\222\021\064\024\217\025\216\036\066\041\071\045\054" +
    "\046\060\047\056\053\055\054\070\055\067\057\177\060" +
    "\uffb8\001\002\000\066\002\uffcc\013\uffcc\014\uffcc\021\uffcc" +
    "\027\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\057\uffcc\001\002\000\066\002\uffcb\013\uffcb" +
    "\014\uffcb\021\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\001\002\000\062" +
    "\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\024\uffbc\025\uffbc" +
    "\036\uffbc\041\uffbc\043\336\045\uffbc\046\uffbc\047\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\057\uffbc\060\uffbc\001\002\000\006" +
    "\043\uffb4\057\uffb4\001\002\000\062\007\uffc2\010\uffc2\011" +
    "\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\024\uffc2\025\uffc2\036\uffc2\041\uffc2\043" +
    "\335\045\uffc2\046\uffc2\047\uffc2\053\uffc2\054\uffc2\055\uffc2" +
    "\057\uffc2\060\uffc2\001\002\000\010\020\uffba\022\uffba\060" +
    "\uffba\001\002\000\032\007\232\010\053\011\074\021\064" +
    "\036\066\041\071\045\054\046\060\047\056\053\055\054" +
    "\070\055\067\001\002\000\004\043\322\001\002\000\006" +
    "\043\uffb5\057\uffb5\001\002\000\004\043\321\001\002\000" +
    "\032\007\232\010\053\011\074\021\064\036\066\041\071" +
    "\045\054\046\060\047\056\053\055\054\070\055\067\001" +
    "\002\000\006\043\uffb7\057\uffb7\001\002\000\046\031\253" +
    "\032\252\033\110\034\125\035\117\037\123\040\112\042" +
    "\141\043\uffb3\044\114\046\124\047\121\050\113\051\107" +
    "\052\uff7f\053\120\054\106\057\uffb3\001\002\000\060\007" +
    "\232\010\053\011\074\012\206\013\031\014\025\015\212" +
    "\017\222\020\uffb8\021\064\022\uffb8\024\217\025\216\036" +
    "\066\041\071\045\054\046\060\047\056\053\055\054\070" +
    "\055\067\057\177\060\uffb8\001\002\000\034\007\057\010" +
    "\053\011\074\021\064\036\066\041\071\043\uff95\045\054" +
    "\046\060\047\056\053\055\054\070\055\067\001\002\000" +
    "\004\043\uff96\001\002\000\004\043\302\001\002\000\062" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\024\uffbe\025\uffbe" +
    "\036\uffbe\041\uffbe\043\301\045\uffbe\046\uffbe\047\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\057\uffbe\060\uffbe\001\002\000\034" +
    "\007\232\010\053\011\074\021\064\036\066\041\071\045" +
    "\054\046\060\047\056\053\055\054\070\055\067\057\246" +
    "\001\002\000\006\043\uffb6\057\uffb6\001\002\000\004\030" +
    "\244\001\002\000\062\007\uffa5\010\uffa5\011\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\024\uffa5\025\uffa5\036\uffa5\041\uffa5\043\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\053\uffa5\054\uffa5\055\uffa5\057\uffa5\060" +
    "\uffa5\001\002\000\062\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\024\uffc0\025\uffc0\036\uffc0\041\uffc0\043\243\045\uffc0" +
    "\046\uffc0\047\uffc0\053\uffc0\054\uffc0\055\uffc0\057\uffc0\060" +
    "\uffc0\001\002\000\026\037\123\040\112\044\114\046\124" +
    "\047\121\050\113\051\107\052\237\053\120\054\106\001" +
    "\002\000\060\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\024" +
    "\uffc6\025\uffc6\036\uffc6\041\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\053\uffc6\054\uffc6\055\uffc6\057\uffc6\060\uffc6\001\002\000" +
    "\004\060\233\001\002\000\054\030\uffd1\031\uff6e\032\uff6e" +
    "\033\uff6e\034\uff6e\035\uff6e\037\uff6e\040\uff6e\041\uff6e\042" +
    "\156\043\uff6e\044\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e" +
    "\052\uff6e\053\uff6e\054\uff6e\055\uff6e\057\uff6e\001\002\000" +
    "\122\002\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\024\uffc7\025\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\001\002\000\004\052\242\001\002\000\004" +
    "\052\241\001\002\000\032\007\057\010\053\011\074\021" +
    "\064\036\066\041\071\045\054\046\060\047\056\053\055" +
    "\054\070\055\067\001\002\000\032\007\uffae\010\uffae\011" +
    "\uffae\021\uffae\036\uffae\041\uffae\045\uffae\046\uffae\047\uffae" +
    "\053\uffae\054\uffae\055\uffae\001\002\000\006\043\uffaf\057" +
    "\uffaf\001\002\000\032\007\uffac\010\uffac\011\uffac\021\uffac" +
    "\036\uffac\041\uffac\045\uffac\046\uffac\047\uffac\053\uffac\054" +
    "\uffac\055\uffac\001\002\000\032\007\uffad\010\uffad\011\uffad" +
    "\021\uffad\036\uffad\041\uffad\045\uffad\046\uffad\047\uffad\053" +
    "\uffad\054\uffad\055\uffad\001\002\000\060\007\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\024\uffbf\025\uffbf\036\uffbf\041\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\053\uffbf\054\uffbf\055\uffbf\057" +
    "\uffbf\060\uffbf\001\002\000\032\007\057\010\053\011\074" +
    "\021\064\036\066\041\071\045\054\046\060\047\056\053" +
    "\055\054\070\055\067\001\002\000\036\033\110\034\125" +
    "\035\117\037\123\040\112\043\uffd4\044\114\046\124\047" +
    "\121\050\113\051\107\053\120\054\106\057\uffd4\001\002" +
    "\000\010\020\260\022\255\060\uff9e\001\002\000\004\043" +
    "\267\001\002\000\046\031\253\032\252\033\110\034\125" +
    "\035\117\037\123\040\112\042\141\043\uffb3\044\114\046" +
    "\124\047\121\050\113\051\107\052\uff7f\053\120\054\106" +
    "\057\251\001\002\000\010\020\260\022\255\060\uff9e\001" +
    "\002\000\006\043\uffb0\057\uffb0\001\002\000\006\043\uffb1" +
    "\057\uffb1\001\002\000\006\043\uffb2\057\uffb2\001\002\000" +
    "\004\027\uff9c\001\002\000\004\027\265\001\002\000\010" +
    "\020\260\022\255\060\uff9e\001\002\000\032\007\057\010" +
    "\053\011\074\021\064\036\066\041\071\045\054\046\060" +
    "\047\056\053\055\054\070\055\067\001\002\000\004\060" +
    "\262\001\002\000\062\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\013\uffa3\014\uffa3\015\uffa3\017\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\024\uffa3\025\uffa3\036\uffa3\041\uffa3\043\uffa3\045\uffa3" +
    "\046\uffa3\047\uffa3\053\uffa3\054\uffa3\055\uffa3\057\uffa3\060" +
    "\uffa3\001\002\000\034\027\uff9d\033\110\034\125\035\117" +
    "\037\123\040\112\044\114\046\124\047\121\050\113\051" +
    "\107\053\120\054\106\001\002\000\004\060\uff9f\001\002" +
    "\000\060\007\232\010\053\011\074\012\206\013\031\014" +
    "\025\015\212\017\222\020\uffb8\021\064\022\uffb8\024\217" +
    "\025\216\036\066\041\071\045\054\046\060\047\056\053" +
    "\055\054\070\055\067\057\177\060\uffb8\001\002\000\010" +
    "\020\uffa0\022\uffa0\060\uffa0\001\002\000\034\007\057\010" +
    "\053\011\074\021\064\036\066\041\071\045\054\046\060" +
    "\047\056\053\055\054\070\055\067\057\270\001\002\000" +
    "\010\020\260\022\255\060\uff9e\001\002\000\034\033\110" +
    "\034\125\035\117\037\123\040\112\044\114\046\124\047" +
    "\121\050\113\051\107\053\120\054\106\057\272\001\002" +
    "\000\010\020\260\022\255\060\uff9e\001\002\000\004\060" +
    "\274\001\002\000\062\007\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\017\uffa1\020\uffa1\021\uffa1\022" +
    "\uffa1\024\uffa1\025\uffa1\036\uffa1\041\uffa1\043\uffa1\045\uffa1" +
    "\046\uffa1\047\uffa1\053\uffa1\054\uffa1\055\uffa1\057\uffa1\060" +
    "\uffa1\001\002\000\004\060\276\001\002\000\062\007\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\024\uffa2\025\uffa2\036\uffa2" +
    "\041\uffa2\043\uffa2\045\uffa2\046\uffa2\047\uffa2\053\uffa2\054" +
    "\uffa2\055\uffa2\057\uffa2\060\uffa2\001\002\000\004\060\300" +
    "\001\002\000\062\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\014\uffa4\015\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\024\uffa4\025\uffa4\036\uffa4\041\uffa4\043\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\053\uffa4\054\uffa4\055\uffa4\057\uffa4\060\uffa4" +
    "\001\002\000\060\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\024\uffbd\025\uffbd\036\uffbd\041\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\057\uffbd\060\uffbd\001\002" +
    "\000\060\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5" +
    "\025\uffc5\036\uffc5\041\uffc5\045\uffc5\046\uffc5\047\uffc5\053" +
    "\uffc5\054\uffc5\055\uffc5\057\uffc5\060\uffc5\001\002\000\004" +
    "\043\uff94\001\002\000\010\020\uffb9\022\uffb9\060\uffb9\001" +
    "\002\000\004\043\314\001\002\000\046\031\253\032\252" +
    "\033\110\034\125\035\117\037\123\040\112\042\141\043" +
    "\uffb3\044\114\046\124\047\121\050\113\051\107\052\uff7f" +
    "\053\120\054\106\057\177\001\002\000\064\007\uffab\010" +
    "\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\310" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\024\uffab\025\uffab\036" +
    "\uffab\041\uffab\043\uffab\045\uffab\046\uffab\047\uffab\053\uffab" +
    "\054\uffab\055\uffab\057\uffab\060\uffab\001\002\000\006\015" +
    "\212\057\177\001\002\000\062\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\015\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\024\uffaa\025\uffaa\036\uffaa\041\uffaa\043\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\053\uffaa\054\uffaa\055\uffaa\057" +
    "\uffaa\060\uffaa\001\002\000\062\007\uffa7\010\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\015\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\024\uffa7\025\uffa7\036\uffa7\041\uffa7\043\uffa7" +
    "\045\uffa7\046\uffa7\047\uffa7\053\uffa7\054\uffa7\055\uffa7\057" +
    "\uffa7\060\uffa7\001\002\000\062\007\uffa6\010\uffa6\011\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\024\uffa6\025\uffa6\036\uffa6\041\uffa6\043\uffa6" +
    "\045\uffa6\046\uffa6\047\uffa6\053\uffa6\054\uffa6\055\uffa6\057" +
    "\uffa6\060\uffa6\001\002\000\032\007\057\010\053\011\074" +
    "\021\064\036\066\041\071\045\054\046\060\047\056\053" +
    "\055\054\070\055\067\001\002\000\034\033\110\034\125" +
    "\035\117\037\123\040\112\044\114\046\124\047\121\050" +
    "\113\051\107\053\120\054\106\057\177\001\002\000\064" +
    "\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\016\317\017\uffa9\020\uffa9\021\uffa9\022\uffa9\024\uffa9" +
    "\025\uffa9\036\uffa9\041\uffa9\043\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\053\uffa9\054\uffa9\055\uffa9\057\uffa9\060\uffa9\001\002" +
    "\000\006\015\212\057\177\001\002\000\062\007\uffa8\010" +
    "\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\017\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\024\uffa8\025\uffa8\036\uffa8\041" +
    "\uffa8\043\uffa8\045\uffa8\046\uffa8\047\uffa8\053\uffa8\054\uffa8" +
    "\055\uffa8\057\uffa8\060\uffa8\001\002\000\060\007\uffc4\010" +
    "\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4\036\uffc4\041" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\057\uffc4\060\uffc4\001\002\000\060\007\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\024\uffc3\025\uffc3\036\uffc3\041\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\053\uffc3\054\uffc3\055\uffc3\057\uffc3" +
    "\060\uffc3\001\002\000\004\043\uff98\001\002\000\004\057" +
    "\177\001\002\000\004\043\326\001\002\000\032\007\057" +
    "\010\053\011\074\021\064\036\066\041\071\045\054\046" +
    "\060\047\056\053\055\054\070\055\067\001\002\000\034" +
    "\033\110\034\125\035\117\037\123\040\112\043\uff9a\044" +
    "\114\046\124\047\121\050\113\051\107\053\120\054\106" +
    "\001\002\000\004\043\331\001\002\000\032\007\232\010" +
    "\053\011\074\021\064\036\066\041\071\045\054\046\060" +
    "\047\056\053\055\054\070\055\067\001\002\000\004\057" +
    "\uff97\001\002\000\004\057\uff99\001\002\000\062\007\uff9b" +
    "\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\017" +
    "\uff9b\020\uff9b\021\uff9b\022\uff9b\024\uff9b\025\uff9b\036\uff9b" +
    "\041\uff9b\043\uff9b\045\uff9b\046\uff9b\047\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\057\uff9b\060\uff9b\001\002\000\060\007\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\024\uffc1\025\uffc1\036\uffc1" +
    "\041\uffc1\045\uffc1\046\uffc1\047\uffc1\053\uffc1\054\uffc1\055" +
    "\uffc1\057\uffc1\060\uffc1\001\002\000\060\007\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\036\uffbb\041\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\053\uffbb\054\uffbb\055\uffbb\057" +
    "\uffbb\060\uffbb\001\002\000\034\033\110\034\125\035\117" +
    "\037\123\040\112\043\uffe2\044\114\046\124\047\121\050" +
    "\113\051\107\053\120\054\106\001\002\000\012\042\uff8f" +
    "\043\uff8f\052\uff8f\056\uff8f\001\002\000\062\002\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\024\uffe7\025\uffe7\036" +
    "\uffe7\041\uffe7\045\uffe7\046\uffe7\047\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\057\uffe7\060\uffe7\001\002\000\012\002\uffeb\013" +
    "\uffeb\014\uffeb\021\uffeb\001\002\000\012\007\050\021\043" +
    "\043\uffd7\052\355\001\002\000\004\043\uffdd\001\002\000" +
    "\006\007\343\056\uffd5\001\002\000\004\043\uffde\001\002" +
    "\000\004\043\352\001\002\000\004\056\351\001\002\000" +
    "\004\043\uffdc\001\002\000\006\007\343\056\uffd5\001\002" +
    "\000\004\056\uffd6\001\002\000\004\043\uffdb\001\002\000" +
    "\032\007\057\010\053\011\074\021\064\036\066\041\071" +
    "\045\054\046\060\047\056\053\055\054\070\055\067\001" +
    "\002\000\006\043\uffda\052\357\001\002\000\032\007\057" +
    "\010\053\011\074\021\064\036\066\041\071\045\054\046" +
    "\060\047\056\053\055\054\070\055\067\001\002\000\034" +
    "\033\110\034\125\035\117\037\123\040\112\043\uffd9\044" +
    "\114\046\124\047\121\050\113\051\107\053\120\054\106" +
    "\001\002\000\034\033\110\034\125\035\117\037\123\040" +
    "\112\043\uffd8\044\114\046\124\047\121\050\113\051\107" +
    "\053\120\054\106\001\002\000\062\002\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\036\uffe8\041" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\057\uffe8\060\uffe8\001\002\000\012\002\uffed\013\uffed\014" +
    "\uffed\021\uffed\001\002\000\004\002\uffea\001\002\000\004" +
    "\007\uffc9\001\002\000\004\055\uffcd\001\002\000\004\007" +
    "\375\001\002\000\004\055\147\001\002\000\014\002\uffcf" +
    "\013\uffcf\014\uffcf\021\uffcf\043\uffcf\001\002\000\016\002" +
    "\uffce\013\uffce\014\uffce\021\uffce\043\uffce\057\177\001\002" +
    "\000\014\002\uffd0\013\uffd0\014\uffd0\021\uffd0\043\uffd0\001" +
    "\002\000\004\055\147\001\002\000\004\055\uffc8\001\002" +
    "\000\014\002\uffca\013\uffca\014\uffca\021\uffca\043\uffca\001" +
    "\002\000\016\002\ufffb\006\ufffb\013\ufffb\014\ufffb\021\ufffb" +
    "\043\ufffb\001\002\000\004\010\u0102\001\002\000\026\002" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\013\ufff4\014\ufff4\021\ufff4" +
    "\041\ufff4\043\ufff4\056\ufff4\001\002\000\026\002\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\013\ufff0\014\ufff0\021\ufff0\041\ufff0" +
    "\043\ufff0\056\ufff0\001\002\000\012\007\010\010\u0102\041" +
    "\u0104\056\ufff1\001\002\000\004\010\u0102\001\002\000\016" +
    "\002\ufffc\006\ufffc\013\ufffc\014\ufffc\021\ufffc\043\ufffc\001" +
    "\002\000\026\002\ufff6\006\ufff6\007\ufff6\010\ufff6\013\ufff6" +
    "\014\ufff6\021\ufff6\041\ufff6\043\ufff6\056\ufff6\001\002\000" +
    "\014\007\010\010\u0102\041\u0104\043\u010a\056\ufff1\001\002" +
    "\000\004\056\u0109\001\002\000\016\002\ufffa\006\ufffa\013" +
    "\ufffa\014\ufffa\021\ufffa\043\ufffa\001\002\000\012\007\010" +
    "\010\u0102\041\u0104\056\ufff1\001\002\000\004\056\ufff3\001" +
    "\002\000\004\056\ufff2\001\002\000\026\002\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\013\ufff5\014\ufff5\021\ufff5\041\ufff5\043" +
    "\ufff5\056\ufff5\001\002\000\012\002\uffe9\013\031\014\025" +
    "\021\020\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\006\003\012\006\013\001\001\000\004\005\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\u010d\006\013\001\001\000\012\005\377\007\u0104\011\376" +
    "\012\u0100\001\001\000\020\013\021\014\025\015\020\016" +
    "\023\022\027\041\022\056\026\001\001\000\006\003\015" +
    "\006\013\001\001\000\006\003\016\006\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\043\367\051\364" +
    "\060\366\001\001\000\002\001\001\000\020\013\021\014" +
    "\363\015\020\016\023\022\027\041\022\056\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\345\024" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\031\020\034\001\001\000\002\001" +
    "\001\000\012\036\045\037\046\040\044\047\050\001\001" +
    "\000\006\020\035\021\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\035\021\041\001\001\000\002\001\001\000\006\050" +
    "\337\051\145\001\001\000\026\035\077\061\336\064\060" +
    "\065\064\070\075\071\072\072\074\073\062\074\071\075" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\035" +
    "\077\061\061\064\060\065\064\070\075\071\072\072\074" +
    "\073\062\074\071\075\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\032" +
    "\121\033\110\034\114\001\001\000\002\001\001\000\010" +
    "\044\143\050\144\051\145\001\001\000\006\066\126\067" +
    "\127\001\001\000\002\001\001\000\026\035\077\061\104" +
    "\064\060\065\064\070\075\071\072\072\074\073\062\074" +
    "\071\075\076\001\001\000\002\001\001\000\004\005\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\035\077\064\100\065\064\070\075\071\072\072" +
    "\074\073\062\074\071\075\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\121\033\110\034\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\035\077\061\125\064\060" +
    "\065\064\070\075\071\072\072\074\073\062\074\071\075" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\121\033\110\034\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\035\077\061\134" +
    "\062\135\064\060\065\064\070\075\071\072\072\074\073" +
    "\062\074\071\075\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\032\121\033\110\034" +
    "\114\063\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\035\077\061\141\064\060\065" +
    "\064\070\075\071\072\072\074\073\062\074\071\075\076" +
    "\001\001\000\012\032\121\033\110\034\114\063\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\177" +
    "\046\200\001\001\000\006\051\171\053\170\001\001\000" +
    "\010\030\151\052\153\054\147\001\001\000\004\055\165" +
    "\001\001\000\002\001\001\000\012\036\161\037\046\040" +
    "\044\047\050\001\001\000\004\031\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\036\163\037\046\040\044\047\050\001" +
    "\001\000\002\001\001\000\006\030\151\054\166\001\001" +
    "\000\002\001\001\000\004\055\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\030\151" +
    "\036\173\037\046\040\044\047\050\052\153\054\147\001" +
    "\001\000\002\001\001\000\004\031\156\001\001\000\002" +
    "\001\001\000\076\015\227\016\023\022\027\027\202\030" +
    "\223\035\077\046\203\061\213\062\226\064\060\065\064" +
    "\070\075\071\072\072\074\073\062\074\071\075\076\076" +
    "\214\077\204\100\230\101\217\102\212\103\222\105\207" +
    "\107\210\110\206\111\225\113\220\114\224\120\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\027\202\030\223\035\077\061\213\062\226\064\060" +
    "\065\064\070\075\071\072\072\074\073\062\074\071\075" +
    "\076\101\322\102\212\103\222\105\207\122\323\123\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\027\202\030\223\035\077\061\305\062\226" +
    "\064\060\065\064\070\075\071\072\072\074\073\062\074" +
    "\071\075\076\101\304\102\212\103\222\105\207\001\001" +
    "\000\002\001\001\000\014\032\121\033\110\034\114\063" +
    "\137\104\253\001\001\000\074\015\227\016\023\022\027" +
    "\027\202\030\223\035\077\046\203\061\213\062\226\064" +
    "\060\065\064\070\075\071\072\072\074\073\062\074\071" +
    "\075\076\076\214\077\303\101\217\102\212\103\222\105" +
    "\207\107\210\110\206\111\225\113\220\114\224\120\201" +
    "\001\001\000\030\035\077\061\134\062\302\064\060\065" +
    "\064\070\075\071\072\072\074\073\062\074\071\075\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\027\202\030\223\035\077\061\247\062\226" +
    "\064\060\065\064\070\075\071\072\072\074\073\062\074" +
    "\071\075\076\101\246\102\212\103\222\105\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\033\233\034\234\106\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\035\077\061\134\062\237\064\060\065\064\070" +
    "\075\071\072\072\074\073\062\074\071\075\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\035\077\061\244" +
    "\064\060\065\064\070\075\071\072\072\074\073\062\074" +
    "\071\075\076\001\001\000\010\032\121\033\110\034\114" +
    "\001\001\000\010\115\256\116\276\117\255\001\001\000" +
    "\002\001\001\000\014\032\121\033\110\034\114\063\137" +
    "\104\253\001\001\000\010\115\256\116\260\117\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\115\256\116" +
    "\263\117\255\001\001\000\026\035\077\061\262\064\060" +
    "\065\064\070\075\071\072\072\074\073\062\074\071\075" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\032\121\033\110\034\114\001\001\000\002\001\001\000" +
    "\076\015\227\016\023\022\027\027\202\030\223\035\077" +
    "\046\203\061\213\062\226\064\060\065\064\070\075\071" +
    "\072\072\074\073\062\074\071\075\076\076\214\077\204" +
    "\100\265\101\217\102\212\103\222\105\207\107\210\110" +
    "\206\111\225\113\220\114\224\120\201\001\001\000\002" +
    "\001\001\000\026\035\077\061\270\064\060\065\064\070" +
    "\075\071\072\072\074\073\062\074\071\075\076\001\001" +
    "\000\010\115\256\116\274\117\255\001\001\000\010\032" +
    "\121\033\110\034\114\001\001\000\010\115\256\116\272" +
    "\117\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\032\121" +
    "\033\110\034\114\046\306\063\137\104\253\001\001\000" +
    "\002\001\001\000\010\046\312\111\311\112\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\035\077\061\314\064\060\065\064\070\075\071\072" +
    "\072\074\073\062\074\071\075\076\001\001\000\012\032" +
    "\121\033\110\034\114\046\315\001\001\000\002\001\001" +
    "\000\010\046\312\111\311\112\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\333\001\001\000\002\001\001\000\030\035" +
    "\077\061\326\064\060\065\064\070\075\071\072\072\074" +
    "\073\062\074\071\075\076\121\327\001\001\000\010\032" +
    "\121\033\110\034\114\001\001\000\002\001\001\000\046" +
    "\027\202\030\223\035\077\061\213\062\226\064\060\065" +
    "\064\070\075\071\072\072\074\073\062\074\071\075\076" +
    "\101\331\102\212\103\222\105\207\124\332\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\121\033\110\034" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\353\036\355\037\046\040\044\047" +
    "\050\001\001\000\002\001\001\000\006\024\346\026\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\346\026\352\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\035\077\061" +
    "\360\064\060\065\064\070\075\071\072\072\074\073\062" +
    "\074\071\075\076\001\001\000\002\001\001\000\026\035" +
    "\077\061\357\064\060\065\064\070\075\071\072\072\074" +
    "\073\062\074\071\075\076\001\001\000\010\032\121\033" +
    "\110\034\114\001\001\000\010\032\121\033\110\034\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\373" +
    "\001\001\000\012\042\372\044\370\050\371\051\145\001" +
    "\001\000\002\001\001\000\006\045\177\046\200\001\001" +
    "\000\002\001\001\000\012\042\375\044\370\050\371\051" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u010c\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\377\010\u0107\011\u0106\012\u0100" +
    "\001\001\000\004\012\u0105\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\377\010\u010a\011\u0106\012\u0100" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\377\010\u010b\011\u0106\012\u0100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\021\014" +
    "\u010e\015\020\016\023\022\027\041\022\056\026\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


    // Connect this parser to a lexer!
    Lexer lexer;
    static String output;
    parser(Lexer lexer){ this.lexer=lexer; }

    static int lastTempVar = 0;
    static String newVar() {
      return "t" + lastTempVar++;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= source_file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // source_file ::= package_clause import_decl_st top_level_decl_st 
            {
              String RESULT =null;
		int topleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int topright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String top = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      parser.output = top;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("source_file",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // source_file ::= package_clause SEMI_COLON import_decl_st top_level_decl_st 
            {
              String RESULT =null;
		int topleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int topright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String top = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      parser.output = top;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("source_file",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // package_clause ::= PACKAGE package_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_clause",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_name ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_name",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // import_decl ::= IMPORT import_decl_grp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // import_decl_grp ::= import_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_decl_grp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_decl_grp ::= OPEN_PARAN import_spec_st CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_decl_grp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_decl_st ::= import_decl import_decl_st 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_decl_st",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_decl_st ::= import_decl SEMI_COLON import_decl_st 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_decl_st",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // import_decl_st ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_decl_st",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // import_spec ::= DOT import_path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // import_spec ::= package_name import_path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // import_spec ::= import_path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // import_spec_st ::= import_spec import_spec_st 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec_st",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // import_spec_st ::= import_spec SEMI_COLON import_spec_st 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec_st",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // import_spec_st ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec_st",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // import_path ::= STRING_LIT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_path",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // top_level_decl ::= declaration 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = d;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // top_level_decl ::= function_decl 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = f;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // top_level_decl ::= function_decl SEMI_COLON 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = f;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // top_level_decl ::= method_decl 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = m;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // top_level_decl ::= method_decl SEMI_COLON 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = m;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // top_level_decl_st ::= top_level_decl top_level_decl_st 
            {
              String RESULT =null;
		int topleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int topright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String top = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int top_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int top_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String top_st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = top + top_st;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl_st",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // top_level_decl_st ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl_st",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration ::= const_decl SEMI_COLON 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = c;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration ::= var_decl SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // const_decl ::= CONST const_decl_grp 
            {
              String RESULT =null;
		int c_grpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_grpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c_grp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = c_grp;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // const_decl_grp ::= const_spec 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = c;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_decl_grp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // const_decl_grp ::= OPEN_PARAN const_spec_st CLOSE_PARAN 
            {
              String RESULT =null;
		int c_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c_st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = c_st;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_decl_grp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // const_spec ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = id;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // const_spec ::= IDENTIFIER EQUAL expression 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = id + " = " + e;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // const_spec ::= IDENTIFIER type EQUAL expression 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = id + " = " + e;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // const_spec_st ::= const_spec SEMI_COLON const_spec_st 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c_st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = c + c_st;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec_st",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // const_spec_st ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec_st",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_decl ::= VAR var_decl_grp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var_decl_grp ::= var_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_grp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_decl_grp ::= OPEN_PARAN var_spec_st CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_grp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var_spec ::= IDENTIFIER var_spec_grp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_spec_grp ::= type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec_grp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_spec_grp ::= type EQUAL expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec_grp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_spec_grp ::= EQUAL expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec_grp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var_spec_grp ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec_grp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var_spec_st ::= var_spec SEMI_COLON var_spec_st 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec_st",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var_spec_st ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec_st",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // short_var_decl ::= identifier_list COLON_EQUAL expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("short_var_decl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // identifier_list ::= IDENTIFIER identifier_st 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // identifier_st ::= COMMA IDENTIFIER identifier_st 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_st",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // identifier_st ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_st",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // function_decl ::= FUNC function_name func_sign_grp 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f_grpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f_grpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f_grp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = "\n" + name + ":" + "\nbegin_func;" + f_grp + "\nend_func;";
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // func_sign_grp ::= function 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = f;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_sign_grp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // func_sign_grp ::= signature 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = s;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_sign_grp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // function_name ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = id;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_name",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // function ::= signature function_body 
            {
              String RESULT =null;
		int fbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = fb;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // function_body ::= block 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = b;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // method_decl ::= FUNC receiver method_name func_sign_grp 
            {
              String RESULT =null;
		
                            System.out.println("METHO");
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // receiver ::= parameters 
            {
              String RESULT =null;
		
                            System.out.println("PARAMS");
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiver",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // method_name ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            System.out.println(id);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_name",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // block ::= OPEN_CURLY statement_list CLOSE_CURLY 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = st;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= declaration 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = "\n" + d;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= simple_stmt SEMI_COLON 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = "\n" + s;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= return_stmt SEMI_COLON 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = "\n" + r;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= break_stmt SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= block 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= block SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= if_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= if_stmt SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= switch_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= switch_stmt SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= for_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= for_stmt SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement_list ::= statement_st 
            {
              String RESULT =null;
		int st_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String st_st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = st_st;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement_st ::= statement statement_st 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int st_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String st_st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = st + st_st;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_st",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement_st ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_st",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simple_stmt ::= expression_stmt 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            System.out.println("EXPR");
                            RESULT = e;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_stmt ::= inc_dec_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simple_stmt ::= assignment 
            {
              String RESULT =null;
		
                            System.out.println("ASSIGN");
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simple_stmt ::= short_var_decl 
            {
              String RESULT =null;
		
                            System.out.println("SH_VAR");
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression_stmt ::= expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = e;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // inc_dec_stmt ::= expression inc_dec_stmt_grp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_dec_stmt",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // inc_dec_stmt_grp ::= INCREMENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_dec_stmt_grp",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // inc_dec_stmt_grp ::= DECREMENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_dec_stmt_grp",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignment ::= expression_list assign_op expression_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assign_op ::= EQUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assign_op ::= add_op EQUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assign_op ::= mul_op EQUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // if_stmt ::= IF expression block 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if_stmt ::= IF expression block ELSE else_if_block_grp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // if_stmt ::= IF simple_stmt SEMI_COLON expression block 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // if_stmt ::= IF simple_stmt SEMI_COLON expression block ELSE else_if_block_grp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // else_if_block_grp ::= if_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_block_grp",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // else_if_block_grp ::= block 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_block_grp",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // switch_stmt ::= expr_switch_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr_switch_stmt ::= SWITCH OPEN_CURLY expr_case_clause_st CLOSE_CURLY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr_switch_stmt ::= SWITCH expression OPEN_CURLY expr_case_clause_st CLOSE_CURLY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr_switch_stmt ::= SWITCH simple_stmt SEMI_COLON OPEN_CURLY expr_case_clause_st CLOSE_CURLY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr_switch_stmt ::= SWITCH simple_stmt SEMI_COLON expression OPEN_CURLY expr_case_clause_st CLOSE_CURLY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr_case_clause ::= expr_switch_case COLON statement_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_case_clause",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_case_clause_st ::= expr_case_clause expr_case_clause_st 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_case_clause_st",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_case_clause_st ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_case_clause_st",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_switch_case ::= CASE expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_case",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_switch_case ::= DEFAULT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_case",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for_stmt ::= FOR for_clause block 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condition ::= expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // for_clause ::= init_stmt SEMI_COLON condition SEMI_COLON post_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_clause",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // init_stmt ::= simple_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_stmt",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // post_stmt ::= simple_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("post_stmt",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // break_stmt ::= BREAK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // return_stmt ::= RETURN 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = r;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // return_stmt ::= RETURN expression_list 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = r;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // type ::= type_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // type ::= type_lit 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // type_name ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_name",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // type_lit ::= function_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_lit",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // function_type ::= FUNC signature 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // signature ::= parameters 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // signature ::= parameters result 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // result ::= parameters 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // result ::= OPEN_PARAN type CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parameters ::= OPEN_PARAN CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parameters ::= OPEN_PARAN parameter_list CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parameter_list ::= parameter_decl parameter_decl_st 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parameter_decl ::= identifier_list type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_decl",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parameter_decl ::= identifier_list CDOTS type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_decl",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parameter_decl_st ::= COMMA parameter_decl parameter_decl_st 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_decl_st",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parameter_decl_st ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_decl_st",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= unary_expr 
            {
              String RESULT =null;
		int un_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int un_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String un_exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = un_exp;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= expression binary_op expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression_list ::= expression expression_st 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression_st ::= COMMA expression expression_st 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_st",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression_st ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_st",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // unary_expr ::= primary_expr 
            {
              String RESULT =null;
		int p_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = p_exp;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // unary_expr ::= unary_op unary_expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // primary_expr ::= operand 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = op;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // primary_expr ::= primary_expr selector 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // primary_expr ::= primary_expr arguments 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = parser.newVar() + " = " + "call " + p + "\n" + "pop_params;";
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // operand ::= literal 
            {
              String RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = lit;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // operand ::= operand_name 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = op;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // operand ::= OPEN_PARAN expression CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // literal ::= basic_lit 
            {
              String RESULT =null;
		int b_litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b_litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b_lit = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = b_lit;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // literal ::= function_lit 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // basic_lit ::= INT_LIT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = i;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_lit",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // basic_lit ::= STRING_LIT 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = s;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_lit",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // function_lit ::= FUNC function 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_lit",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // selector ::= DOT IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arguments ::= OPEN_PARAN CLOSE_PARAN 
            {
              String RESULT =null;
		
                            RESULT = "";
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // arguments ::= OPEN_PARAN expression_list CLOSE_PARAN 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // operand_name ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = id;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand_name",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // operand_name ::= qualified_ident 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = id;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand_name",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // qualified_ident ::= DOT package_name DOT IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = id;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualified_ident",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // binary_op ::= OR_OP 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // binary_op ::= AND_OP 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // binary_op ::= REL_OP 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // binary_op ::= add_op 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // binary_op ::= mul_op 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // add_op ::= PLUS 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // add_op ::= MINUS 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // add_op ::= BAR 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // mul_op ::= ASTRISK 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // mul_op ::= SLASH 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // mul_op ::= PERCENT 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // mul_op ::= SHIFT_LEFT 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // mul_op ::= SHIFT_RIGHT 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // mul_op ::= AMBERSAND 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // unary_op ::= PLUS 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // unary_op ::= MINUS 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // unary_op ::= EXCLAMATION 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // unary_op ::= ASTRISK 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // unary_op ::= AMBERSAND 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // unary_op ::= LESS_DASH 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = op;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
